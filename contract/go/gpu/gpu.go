// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gpu

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IGPUInfo is an auto generated low-level Go binding around an user-defined struct.
type IGPUInfo struct {
	Name    string
	Owner   common.Address
	Time    uint64
	Lock    *big.Int
	Count   *big.Int
	Average *big.Int
	InUse   bool
	Active  bool
}

// GpuMetaData contains all meta data concerning the Gpu contract.
var GpuMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_gn\",\"type\":\"string\"}],\"name\":\"AddGPU\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_s\",\"type\":\"bool\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gn\",\"type\":\"string\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"}],\"name\":\"getGPU\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"lock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"average\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"structIGPU.Info\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gn\",\"type\":\"string\"}],\"name\":\"getIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_salt\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"next\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dif\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_m\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_s\",\"type\":\"uint64\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052612710600260006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555069021e19e0c9bab24000006003557e800000000000000000000000000000000000000000000000000000000000006005557e800000000000000000000000000000000000000000000000000000000000006006553480156200009057600080fd5b5060405162003763380380620037638339818101604052810190620000b6919062000254565b620000d6620000ca6200011e60201b60201c565b6200012660201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000286565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021c82620001ef565b9050919050565b6200022e816200020f565b81146200023a57600080fd5b50565b6000815190506200024e8162000223565b92915050565b6000602082840312156200026d576200026c620001ea565b5b60006200027d848285016200023d565b91505092915050565b6134cd80620002966000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063c0ea09d71161007c578063c0ea09d71461036b578063c35af42914610389578063d370a37d146103a5578063d48dca2d146103d5578063ea1bbe35146103f1578063f2fde38b1461042157610158565b80638da5cb5b146102cd578063919840ad146102eb5780639fa6a6e3146102f5578063a8d5fd6514610313578063b0c8f9dc14610331578063be9a65551461034d57610158565b806358e5bd4a1161011557806358e5bd4a1461021f57806370a082311461023b578063715018a61461026b57806371d49a631461027557806376cdb03b146102915780637d94792a146102af57610158565b806319cae4621461015d578063228cb7331461017b5780632e1a7d4d146101995780633ad8fe1a146101b557806343e5f42d146101d15780634c8fe52614610201575b600080fd5b61016561043d565b6040516101729190611f4f565b60405180910390f35b610183610443565b6040516101909190611f4f565b60405180910390f35b6101b360048036038101906101ae9190611faa565b610449565b005b6101cf60048036038101906101ca9190612017565b61057f565b005b6101eb60048036038101906101e69190612057565b610862565b6040516101f8919061223e565b60405180910390f35b610209610b5c565b6040516102169190611f4f565b60405180910390f35b61023960048036038101906102349190612260565b610b62565b005b610255600480360381019061025091906122df565b610bfb565b6040516102629190611f4f565b60405180910390f35b610273610c44565b005b61028f600480360381019061028a9190612057565b610c58565b005b610299610ea5565b6040516102a6919061231b565b60405180910390f35b6102b7610ecb565b6040516102c4919061234f565b60405180910390f35b6102d5610ed1565b6040516102e2919061231b565b60405180910390f35b6102f3610efa565b005b6102fd610f04565b60405161030a9190612379565b60405180910390f35b61031b610f1e565b6040516103289190612379565b60405180910390f35b61034b600480360381019061034691906124c9565b610f38565b005b6103556112e7565b6040516103629190611f4f565b60405180910390f35b6103736112ed565b6040516103809190611f4f565b60405180910390f35b6103a3600480360381019061039e91906125b3565b6112f3565b005b6103bf60048036038101906103ba9190612057565b6116e1565b6040516103cc919061231b565b60405180910390f35b6103ef60048036038101906103ea919061263b565b6117f7565b005b61040b600480360381019061040691906124c9565b611907565b6040516104189190612379565b60405180910390f35b61043b600480360381019061043691906122df565b61194f565b005b60055481565b60035481565b80600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461049891906126aa565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376890c5833836040518363ffffffff1660e01b81526004016104fc9291906126de565b600060405180830381600087803b15801561051657600080fd5b505af115801561052a573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364826040516105749190611f4f565b60405180910390a250565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b81526004016105ef90612764565b6020604051808303816000875af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190612799565b73ffffffffffffffffffffffffffffffffffffffff1614610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90612812565b60405180910390fd5b600060098367ffffffffffffffff16815481106106a8576106a7612832565b5b906000526020600020906006020160050160006101000a81548160ff0219169083151502179055508060098367ffffffffffffffff16815481106106ef576106ee612832565b5b906000526020600020906006020160020154116107725760098267ffffffffffffffff168154811061072457610723612832565b5b9060005260206000209060060201600201549050600060098367ffffffffffffffff168154811061075857610757612832565b5b9060005260206000209060060201600201819055506107b9565b8060098367ffffffffffffffff168154811061079157610790612832565b5b906000526020600020906006020160020160008282546107b191906126aa565b925050819055505b80600b600060098567ffffffffffffffff16815481106107dc576107db612832565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108579190612861565b925050819055505050565b61086a611ecd565b60098267ffffffffffffffff168154811061088857610887612832565b5b906000526020600020906006020160000180546108a4906128c4565b80601f01602080910402602001604051908101604052809291908181526020018280546108d0906128c4565b801561091d5780601f106108f25761010080835404028352916020019161091d565b820191906000526020600020905b81548152906001019060200180831161090057829003601f168201915b5050505050816000018190525060098267ffffffffffffffff168154811061094857610947612832565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060098267ffffffffffffffff16815481106109cf576109ce612832565b5b906000526020600020906006020160010160149054906101000a900467ffffffffffffffff16816040019067ffffffffffffffff16908167ffffffffffffffff168152505060098267ffffffffffffffff1681548110610a3257610a31612832565b5b90600052602060002090600602016002015481606001818152505060098267ffffffffffffffff1681548110610a6b57610a6a612832565b5b90600052602060002090600602016003015481608001818152505060098267ffffffffffffffff1681548110610aa457610aa3612832565b5b9060005260206000209060060201600401548160a001818152505060098267ffffffffffffffff1681548110610add57610adc612832565b5b906000526020600020906006020160050160009054906101000a900460ff168160c001901515908115158152505060098267ffffffffffffffff1681548110610b2957610b28612832565b5b906000526020600020906006020160050160019054906101000a900460ff168160e0019015159081151581525050919050565b60065481565b610b6a6119d2565b60008167ffffffffffffffff1611610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae90612941565b60405180910390fd5b610bbf611a50565b8260068190555080600260006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600381905550505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c4c6119d2565b610c566000611e01565b565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401610cc890612764565b6020604051808303816000875af1158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190612799565b73ffffffffffffffffffffffffffffffffffffffff1614610d61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d58906129ad565b60405180910390fd5b60098167ffffffffffffffff1681548110610d7f57610d7e612832565b5b906000526020600020906006020160050160019054906101000a900460ff16610ddd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd490612a19565b60405180910390fd5b60098167ffffffffffffffff1681548110610dfb57610dfa612832565b5b906000526020600020906006020160050160009054906101000a900460ff1615610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5190612a85565b60405180910390fd5b600160098267ffffffffffffffff1681548110610e7a57610e79612832565b5b906000526020600020906006020160050160006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f02611a50565b565b600160149054906101000a900467ffffffffffffffff1681565b600260009054906101000a900467ffffffffffffffff1681565b610f40611a50565b6000600a82604051610f529190612ae1565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb690612b44565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b815260040161101890612bb0565b6020604051808303816000875af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190612799565b73ffffffffffffffffffffffffffffffffffffffff166361e728b13360036040518363ffffffff1660e01b8152600401611096929190612c22565b60006040518083038186803b1580156110ae57600080fd5b505afa1580156110c2573d6000803e3d6000fd5b505050506110ce611ecd565b81816000018190525033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060018160e0019015159081151581525050600981908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000190816111619190612ded565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550606082015181600201556080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff02191690831515021790555060e08201518160050160016101000a81548160ff0219169083151502179055505050600980549050600a8360405161124e9190612ae1565b908152602001604051809103902060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167ffea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f7060016009805490506112cc9190612ebf565b846040516112db929190612f34565b60405180910390a25050565b60075481565b60045481565b6112fb611a50565b3373ffffffffffffffffffffffffffffffffffffffff1660098367ffffffffffffffff16815481106113305761132f612832565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113af90612fb0565b60405180910390fd5b60098267ffffffffffffffff16815481106113d6576113d5612832565b5b906000526020600020906006020160050160009054906101000a900460ff1615611435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142c90612a85565b60405180910390fd5b600060085460098467ffffffffffffffff168154811061145857611457612832565b5b90600052602060002090600602016000018360405160200161147c939291906130bb565b6040516020818303038152906040528051906020012090506005548160001c10156116dc576000600260009054906101000a900467ffffffffffffffff1667ffffffffffffffff166004546114d1919061311f565b905080600460008282546114e591906126aa565b925050819055508060098567ffffffffffffffff168154811061150b5761150a612832565b5b9060005260206000209060060201600201600082825461152b9190612861565b9250508190555060006007544360098767ffffffffffffffff168154811061155657611555612832565b5b90600052602060002090600602016004015460098867ffffffffffffffff168154811061158657611585612832565b5b9060005260206000209060060201600301546115a29190613150565b6115ac9190612861565b6115b691906126aa565b9050600160098667ffffffffffffffff16815481106115d8576115d7612832565b5b906000526020600020906006020160030160008282546115f89190612861565b9250508190555060098567ffffffffffffffff168154811061161d5761161c612832565b5b9060005260206000209060060201600301548161163a919061311f565b60098667ffffffffffffffff168154811061165857611657612832565b5b906000526020600020906006020160040181905550600160149054906101000a900467ffffffffffffffff1660098667ffffffffffffffff16815481106116a2576116a1612832565b5b906000526020600020906006020160010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505b505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660098367ffffffffffffffff168154811061171857611717612832565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036117a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611797906131de565b60405180910390fd5b60098267ffffffffffffffff16815481106117be576117bd612832565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6117ff611a50565b3373ffffffffffffffffffffffffffffffffffffffff1660098367ffffffffffffffff168154811061183457611833612832565b5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b390612fb0565b60405180910390fd5b8060098367ffffffffffffffff16815481106118db576118da612832565b5b906000526020600020906006020160050160016101000a81548160ff0219169083151502179055505050565b60006001600a8360405161191b9190612ae1565b908152602001604051809103902060009054906101000a900467ffffffffffffffff166119489190612ebf565b9050919050565b6119576119d2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bd90613270565b60405180910390fd5b6119cf81611e01565b50565b6119da611ec5565b73ffffffffffffffffffffffffffffffffffffffff166119f8610ed1565b73ffffffffffffffffffffffffffffffffffffffff1614611a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a45906132dc565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401611aab90613348565b6020604051808303816000875af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee9190612799565b90508073ffffffffffffffffffffffffffffffffffffffff1663919840ad6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b3857600080fd5b505af1158015611b4c573d6000803e3d6000fd5b5050505060008173ffffffffffffffffffffffffffffffffffffffff16639fa6a6e36040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc3919061337d565b9050600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff161115611dfd57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401611c50906133f6565b6020604051808303816000875af1158015611c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c939190612799565b73ffffffffffffffffffffffffffffffffffffffff166340c10f19306003546040518363ffffffff1660e01b8152600401611ccf9291906126de565b600060405180830381600087803b158015611ce957600080fd5b505af1158015611cfd573d6000803e3d6000fd5b5050505060035460046000828254611d159190612861565b9250508190555080600160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff166312a02c82600160149054906101000a900467ffffffffffffffff166040518263ffffffff1660e01b8152600401611d949190612379565b60408051808303816000875af1158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd69190613457565b60076000600860008491905055839190505550506006546005819055506005546006819055505b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60405180610100016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6000819050919050565b611f4981611f36565b82525050565b6000602082019050611f646000830184611f40565b92915050565b6000604051905090565b600080fd5b600080fd5b611f8781611f36565b8114611f9257600080fd5b50565b600081359050611fa481611f7e565b92915050565b600060208284031215611fc057611fbf611f74565b5b6000611fce84828501611f95565b91505092915050565b600067ffffffffffffffff82169050919050565b611ff481611fd7565b8114611fff57600080fd5b50565b60008135905061201181611feb565b92915050565b6000806040838503121561202e5761202d611f74565b5b600061203c85828601612002565b925050602061204d85828601611f95565b9150509250929050565b60006020828403121561206d5761206c611f74565b5b600061207b84828501612002565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120be5780820151818401526020810190506120a3565b60008484015250505050565b6000601f19601f8301169050919050565b60006120e682612084565b6120f0818561208f565b93506121008185602086016120a0565b612109816120ca565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061213f82612114565b9050919050565b61214f81612134565b82525050565b61215e81611fd7565b82525050565b61216d81611f36565b82525050565b60008115159050919050565b61218881612173565b82525050565b60006101008301600083015184820360008601526121ac82826120db565b91505060208301516121c16020860182612146565b5060408301516121d46040860182612155565b5060608301516121e76060860182612164565b5060808301516121fa6080860182612164565b5060a083015161220d60a0860182612164565b5060c083015161222060c086018261217f565b5060e083015161223360e086018261217f565b508091505092915050565b60006020820190508181036000830152612258818461218e565b905092915050565b60008060006060848603121561227957612278611f74565b5b600061228786828701611f95565b935050602061229886828701611f95565b92505060406122a986828701612002565b9150509250925092565b6122bc81612134565b81146122c757600080fd5b50565b6000813590506122d9816122b3565b92915050565b6000602082840312156122f5576122f4611f74565b5b6000612303848285016122ca565b91505092915050565b61231581612134565b82525050565b6000602082019050612330600083018461230c565b92915050565b6000819050919050565b61234981612336565b82525050565b60006020820190506123646000830184612340565b92915050565b61237381611fd7565b82525050565b600060208201905061238e600083018461236a565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123d6826120ca565b810181811067ffffffffffffffff821117156123f5576123f461239e565b5b80604052505050565b6000612408611f6a565b905061241482826123cd565b919050565b600067ffffffffffffffff8211156124345761243361239e565b5b61243d826120ca565b9050602081019050919050565b82818337600083830152505050565b600061246c61246784612419565b6123fe565b90508281526020810184848401111561248857612487612399565b5b61249384828561244a565b509392505050565b600082601f8301126124b0576124af612394565b5b81356124c0848260208601612459565b91505092915050565b6000602082840312156124df576124de611f74565b5b600082013567ffffffffffffffff8111156124fd576124fc611f79565b5b6125098482850161249b565b91505092915050565b600067ffffffffffffffff82111561252d5761252c61239e565b5b612536826120ca565b9050602081019050919050565b600061255661255184612512565b6123fe565b90508281526020810184848401111561257257612571612399565b5b61257d84828561244a565b509392505050565b600082601f83011261259a57612599612394565b5b81356125aa848260208601612543565b91505092915050565b600080604083850312156125ca576125c9611f74565b5b60006125d885828601612002565b925050602083013567ffffffffffffffff8111156125f9576125f8611f79565b5b61260585828601612585565b9150509250929050565b61261881612173565b811461262357600080fd5b50565b6000813590506126358161260f565b92915050565b6000806040838503121561265257612651611f74565b5b600061266085828601612002565b925050602061267185828601612626565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126b582611f36565b91506126c083611f36565b92508282039050818111156126d8576126d761267b565b5b92915050565b60006040820190506126f3600083018561230c565b6127006020830184611f40565b9392505050565b600082825260208201905092915050565b7f7370616365000000000000000000000000000000000000000000000000000000600082015250565b600061274e600583612707565b915061275982612718565b602082019050919050565b6000602082019050818103600083015261277d81612741565b9050919050565b600081519050612793816122b3565b92915050565b6000602082840312156127af576127ae611f74565b5b60006127bd84828501612784565b91505092915050565b7f696e76616c696420726c00000000000000000000000000000000000000000000600082015250565b60006127fc600a83612707565b9150612807826127c6565b602082019050919050565b6000602082019050818103600083015261282b816127ef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061286c82611f36565b915061287783611f36565b925082820190508082111561288f5761288e61267b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806128dc57607f821691505b6020821081036128ef576128ee612895565b5b50919050565b7f696e76616c696420700000000000000000000000000000000000000000000000600082015250565b600061292b600983612707565b9150612936826128f5565b602082019050919050565b6000602082019050818103600083015261295a8161291e565b9050919050565b7f696e76616c696420720000000000000000000000000000000000000000000000600082015250565b6000612997600983612707565b91506129a282612961565b602082019050919050565b600060208201905081810360008301526129c68161298a565b9050919050565b7f6e6f742061637469766500000000000000000000000000000000000000000000600082015250565b6000612a03600a83612707565b9150612a0e826129cd565b602082019050919050565b60006020820190508181036000830152612a32816129f6565b9050919050565b7f696e207573650000000000000000000000000000000000000000000000000000600082015250565b6000612a6f600683612707565b9150612a7a82612a39565b602082019050919050565b60006020820190508181036000830152612a9e81612a62565b9050919050565b600081905092915050565b6000612abb82612084565b612ac58185612aa5565b9350612ad58185602086016120a0565b80840191505092915050565b6000612aed8284612ab0565b915081905092915050565b7f6578697374000000000000000000000000000000000000000000000000000000600082015250565b6000612b2e600583612707565b9150612b3982612af8565b602082019050919050565b60006020820190508181036000830152612b5d81612b21565b9050919050565b7f6e6f646500000000000000000000000000000000000000000000000000000000600082015250565b6000612b9a600483612707565b9150612ba582612b64565b602082019050919050565b60006020820190508181036000830152612bc981612b8d565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612c0c612c07612c0284612bd0565b612be7565b612bda565b9050919050565b612c1c81612bf1565b82525050565b6000604082019050612c37600083018561230c565b612c446020830184612c13565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612cad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c70565b612cb78683612c70565b95508019841693508086168417925050509392505050565b6000612cea612ce5612ce084611f36565b612be7565b611f36565b9050919050565b6000819050919050565b612d0483612ccf565b612d18612d1082612cf1565b848454612c7d565b825550505050565b600090565b612d2d612d20565b612d38818484612cfb565b505050565b5b81811015612d5c57612d51600082612d25565b600181019050612d3e565b5050565b601f821115612da157612d7281612c4b565b612d7b84612c60565b81016020851015612d8a578190505b612d9e612d9685612c60565b830182612d3d565b50505b505050565b600082821c905092915050565b6000612dc460001984600802612da6565b1980831691505092915050565b6000612ddd8383612db3565b9150826002028217905092915050565b612df682612084565b67ffffffffffffffff811115612e0f57612e0e61239e565b5b612e1982546128c4565b612e24828285612d60565b600060209050601f831160018114612e575760008415612e45578287015190505b612e4f8582612dd1565b865550612eb7565b601f198416612e6586612c4b565b60005b82811015612e8d57848901518255600182019150602085019450602081019050612e68565b86831015612eaa5784890151612ea6601f891682612db3565b8355505b6001600288020188555050505b505050505050565b6000612eca82611fd7565b9150612ed583611fd7565b9250828203905067ffffffffffffffff811115612ef557612ef461267b565b5b92915050565b6000612f0682612084565b612f108185612707565b9350612f208185602086016120a0565b612f29816120ca565b840191505092915050565b6000604082019050612f49600083018561236a565b8181036020830152612f5b8184612efb565b90509392505050565b7f696e76616c696400000000000000000000000000000000000000000000000000600082015250565b6000612f9a600783612707565b9150612fa582612f64565b602082019050919050565b60006020820190508181036000830152612fc981612f8d565b9050919050565b6000819050919050565b612feb612fe682612336565b612fd0565b82525050565b60008154612ffe816128c4565b6130088186612aa5565b9450600182166000811461302357600181146130385761306b565b60ff198316865281151582028601935061306b565b61304185612c4b565b60005b8381101561306357815481890152600182019150602081019050613044565b838801955050505b50505092915050565b600081519050919050565b600081905092915050565b600061309582613074565b61309f818561307f565b93506130af8185602086016120a0565b80840191505092915050565b60006130c78286612fda565b6020820191506130d78285612ff1565b91506130e3828461308a565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061312a82611f36565b915061313583611f36565b925082613145576131446130f0565b5b828204905092915050565b600061315b82611f36565b915061316683611f36565b925082820261317481611f36565b9150828204841483151761318b5761318a61267b565b5b5092915050565b7f6e6f206578697374000000000000000000000000000000000000000000000000600082015250565b60006131c8600883612707565b91506131d382613192565b602082019050919050565b600060208201905081810360008301526131f7816131bb565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061325a602683612707565b9150613265826131fe565b604082019050919050565b600060208201905081810360008301526132898161324d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006132c6602083612707565b91506132d182613290565b602082019050919050565b600060208201905081810360008301526132f5816132b9565b9050919050565b7f65706f6368000000000000000000000000000000000000000000000000000000600082015250565b6000613332600583612707565b915061333d826132fc565b602082019050919050565b6000602082019050818103600083015261336181613325565b9050919050565b60008151905061337781611feb565b92915050565b60006020828403121561339357613392611f74565b5b60006133a184828501613368565b91505092915050565b7f636f6e74726f6c00000000000000000000000000000000000000000000000000600082015250565b60006133e0600783612707565b91506133eb826133aa565b602082019050919050565b6000602082019050818103600083015261340f816133d3565b9050919050565b60008151905061342581611f7e565b92915050565b61343481612336565b811461343f57600080fd5b50565b6000815190506134518161342b565b92915050565b6000806040838503121561346e5761346d611f74565b5b600061347c85828601613416565b925050602061348d85828601613442565b915050925092905056fea26469706673582212202e3fb1281d4c10dc112891d984cc7ce3dfde63a2b7c5f83bab73466065076bcb64736f6c63430008180033",
}

// GpuABI is the input ABI used to generate the binding from.
// Deprecated: Use GpuMetaData.ABI instead.
var GpuABI = GpuMetaData.ABI

// GpuBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GpuMetaData.Bin instead.
var GpuBin = GpuMetaData.Bin

// DeployGpu deploys a new Ethereum contract, binding an instance of Gpu to it.
func DeployGpu(auth *bind.TransactOpts, backend bind.ContractBackend, _b common.Address) (common.Address, *types.Transaction, *Gpu, error) {
	parsed, err := GpuMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GpuBin), backend, _b)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gpu{GpuCaller: GpuCaller{contract: contract}, GpuTransactor: GpuTransactor{contract: contract}, GpuFilterer: GpuFilterer{contract: contract}}, nil
}

// Gpu is an auto generated Go binding around an Ethereum contract.
type Gpu struct {
	GpuCaller     // Read-only binding to the contract
	GpuTransactor // Write-only binding to the contract
	GpuFilterer   // Log filterer for contract events
}

// GpuCaller is an auto generated read-only Go binding around an Ethereum contract.
type GpuCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpuTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GpuTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpuFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GpuFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GpuSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GpuSession struct {
	Contract     *Gpu              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GpuCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GpuCallerSession struct {
	Contract *GpuCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// GpuTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GpuTransactorSession struct {
	Contract     *GpuTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GpuRaw is an auto generated low-level Go binding around an Ethereum contract.
type GpuRaw struct {
	Contract *Gpu // Generic contract binding to access the raw methods on
}

// GpuCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GpuCallerRaw struct {
	Contract *GpuCaller // Generic read-only contract binding to access the raw methods on
}

// GpuTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GpuTransactorRaw struct {
	Contract *GpuTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGpu creates a new instance of Gpu, bound to a specific deployed contract.
func NewGpu(address common.Address, backend bind.ContractBackend) (*Gpu, error) {
	contract, err := bindGpu(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gpu{GpuCaller: GpuCaller{contract: contract}, GpuTransactor: GpuTransactor{contract: contract}, GpuFilterer: GpuFilterer{contract: contract}}, nil
}

// NewGpuCaller creates a new read-only instance of Gpu, bound to a specific deployed contract.
func NewGpuCaller(address common.Address, caller bind.ContractCaller) (*GpuCaller, error) {
	contract, err := bindGpu(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GpuCaller{contract: contract}, nil
}

// NewGpuTransactor creates a new write-only instance of Gpu, bound to a specific deployed contract.
func NewGpuTransactor(address common.Address, transactor bind.ContractTransactor) (*GpuTransactor, error) {
	contract, err := bindGpu(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GpuTransactor{contract: contract}, nil
}

// NewGpuFilterer creates a new log filterer instance of Gpu, bound to a specific deployed contract.
func NewGpuFilterer(address common.Address, filterer bind.ContractFilterer) (*GpuFilterer, error) {
	contract, err := bindGpu(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GpuFilterer{contract: contract}, nil
}

// bindGpu binds a generic wrapper to an already deployed contract.
func bindGpu(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GpuMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gpu *GpuRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gpu.Contract.GpuCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gpu *GpuRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpu.Contract.GpuTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gpu *GpuRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gpu.Contract.GpuTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gpu *GpuCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gpu.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gpu *GpuTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpu.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gpu *GpuTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gpu.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _a) view returns(uint256)
func (_Gpu *GpuCaller) BalanceOf(opts *bind.CallOpts, _a common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "balanceOf", _a)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _a) view returns(uint256)
func (_Gpu *GpuSession) BalanceOf(_a common.Address) (*big.Int, error) {
	return _Gpu.Contract.BalanceOf(&_Gpu.CallOpts, _a)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _a) view returns(uint256)
func (_Gpu *GpuCallerSession) BalanceOf(_a common.Address) (*big.Int, error) {
	return _Gpu.Contract.BalanceOf(&_Gpu.CallOpts, _a)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Gpu *GpuCaller) Bank(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "bank")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Gpu *GpuSession) Bank() (common.Address, error) {
	return _Gpu.Contract.Bank(&_Gpu.CallOpts)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Gpu *GpuCallerSession) Bank() (common.Address, error) {
	return _Gpu.Contract.Bank(&_Gpu.CallOpts)
}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Gpu *GpuCaller) Current(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "current")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Gpu *GpuSession) Current() (uint64, error) {
	return _Gpu.Contract.Current(&_Gpu.CallOpts)
}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Gpu *GpuCallerSession) Current() (uint64, error) {
	return _Gpu.Contract.Current(&_Gpu.CallOpts)
}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Gpu *GpuCaller) Difficulty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "difficulty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Gpu *GpuSession) Difficulty() (*big.Int, error) {
	return _Gpu.Contract.Difficulty(&_Gpu.CallOpts)
}

// Difficulty is a free data retrieval call binding the contract method 0x19cae462.
//
// Solidity: function difficulty() view returns(uint256)
func (_Gpu *GpuCallerSession) Difficulty() (*big.Int, error) {
	return _Gpu.Contract.Difficulty(&_Gpu.CallOpts)
}

// GetGPU is a free data retrieval call binding the contract method 0x43e5f42d.
//
// Solidity: function getGPU(uint64 _gi) view returns((string,address,uint64,uint256,uint256,uint256,bool,bool) _info)
func (_Gpu *GpuCaller) GetGPU(opts *bind.CallOpts, _gi uint64) (IGPUInfo, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "getGPU", _gi)

	if err != nil {
		return *new(IGPUInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IGPUInfo)).(*IGPUInfo)

	return out0, err

}

// GetGPU is a free data retrieval call binding the contract method 0x43e5f42d.
//
// Solidity: function getGPU(uint64 _gi) view returns((string,address,uint64,uint256,uint256,uint256,bool,bool) _info)
func (_Gpu *GpuSession) GetGPU(_gi uint64) (IGPUInfo, error) {
	return _Gpu.Contract.GetGPU(&_Gpu.CallOpts, _gi)
}

// GetGPU is a free data retrieval call binding the contract method 0x43e5f42d.
//
// Solidity: function getGPU(uint64 _gi) view returns((string,address,uint64,uint256,uint256,uint256,bool,bool) _info)
func (_Gpu *GpuCallerSession) GetGPU(_gi uint64) (IGPUInfo, error) {
	return _Gpu.Contract.GetGPU(&_Gpu.CallOpts, _gi)
}

// GetIndex is a free data retrieval call binding the contract method 0xea1bbe35.
//
// Solidity: function getIndex(string _gn) view returns(uint64)
func (_Gpu *GpuCaller) GetIndex(opts *bind.CallOpts, _gn string) (uint64, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "getIndex", _gn)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetIndex is a free data retrieval call binding the contract method 0xea1bbe35.
//
// Solidity: function getIndex(string _gn) view returns(uint64)
func (_Gpu *GpuSession) GetIndex(_gn string) (uint64, error) {
	return _Gpu.Contract.GetIndex(&_Gpu.CallOpts, _gn)
}

// GetIndex is a free data retrieval call binding the contract method 0xea1bbe35.
//
// Solidity: function getIndex(string _gn) view returns(uint64)
func (_Gpu *GpuCallerSession) GetIndex(_gn string) (uint64, error) {
	return _Gpu.Contract.GetIndex(&_Gpu.CallOpts, _gn)
}

// GetOwner is a free data retrieval call binding the contract method 0xd370a37d.
//
// Solidity: function getOwner(uint64 _gi) view returns(address)
func (_Gpu *GpuCaller) GetOwner(opts *bind.CallOpts, _gi uint64) (common.Address, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "getOwner", _gi)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0xd370a37d.
//
// Solidity: function getOwner(uint64 _gi) view returns(address)
func (_Gpu *GpuSession) GetOwner(_gi uint64) (common.Address, error) {
	return _Gpu.Contract.GetOwner(&_Gpu.CallOpts, _gi)
}

// GetOwner is a free data retrieval call binding the contract method 0xd370a37d.
//
// Solidity: function getOwner(uint64 _gi) view returns(address)
func (_Gpu *GpuCallerSession) GetOwner(_gi uint64) (common.Address, error) {
	return _Gpu.Contract.GetOwner(&_Gpu.CallOpts, _gi)
}

// Next is a free data retrieval call binding the contract method 0x4c8fe526.
//
// Solidity: function next() view returns(uint256)
func (_Gpu *GpuCaller) Next(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "next")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Next is a free data retrieval call binding the contract method 0x4c8fe526.
//
// Solidity: function next() view returns(uint256)
func (_Gpu *GpuSession) Next() (*big.Int, error) {
	return _Gpu.Contract.Next(&_Gpu.CallOpts)
}

// Next is a free data retrieval call binding the contract method 0x4c8fe526.
//
// Solidity: function next() view returns(uint256)
func (_Gpu *GpuCallerSession) Next() (*big.Int, error) {
	return _Gpu.Contract.Next(&_Gpu.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpu *GpuCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpu *GpuSession) Owner() (common.Address, error) {
	return _Gpu.Contract.Owner(&_Gpu.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gpu *GpuCallerSession) Owner() (common.Address, error) {
	return _Gpu.Contract.Owner(&_Gpu.CallOpts)
}

// Rest is a free data retrieval call binding the contract method 0xc0ea09d7.
//
// Solidity: function rest() view returns(uint256)
func (_Gpu *GpuCaller) Rest(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "rest")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Rest is a free data retrieval call binding the contract method 0xc0ea09d7.
//
// Solidity: function rest() view returns(uint256)
func (_Gpu *GpuSession) Rest() (*big.Int, error) {
	return _Gpu.Contract.Rest(&_Gpu.CallOpts)
}

// Rest is a free data retrieval call binding the contract method 0xc0ea09d7.
//
// Solidity: function rest() view returns(uint256)
func (_Gpu *GpuCallerSession) Rest() (*big.Int, error) {
	return _Gpu.Contract.Rest(&_Gpu.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_Gpu *GpuCaller) Reward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "reward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_Gpu *GpuSession) Reward() (*big.Int, error) {
	return _Gpu.Contract.Reward(&_Gpu.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_Gpu *GpuCallerSession) Reward() (*big.Int, error) {
	return _Gpu.Contract.Reward(&_Gpu.CallOpts)
}

// Seed is a free data retrieval call binding the contract method 0x7d94792a.
//
// Solidity: function seed() view returns(bytes32)
func (_Gpu *GpuCaller) Seed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "seed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Seed is a free data retrieval call binding the contract method 0x7d94792a.
//
// Solidity: function seed() view returns(bytes32)
func (_Gpu *GpuSession) Seed() ([32]byte, error) {
	return _Gpu.Contract.Seed(&_Gpu.CallOpts)
}

// Seed is a free data retrieval call binding the contract method 0x7d94792a.
//
// Solidity: function seed() view returns(bytes32)
func (_Gpu *GpuCallerSession) Seed() ([32]byte, error) {
	return _Gpu.Contract.Seed(&_Gpu.CallOpts)
}

// Share is a free data retrieval call binding the contract method 0xa8d5fd65.
//
// Solidity: function share() view returns(uint64)
func (_Gpu *GpuCaller) Share(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "share")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Share is a free data retrieval call binding the contract method 0xa8d5fd65.
//
// Solidity: function share() view returns(uint64)
func (_Gpu *GpuSession) Share() (uint64, error) {
	return _Gpu.Contract.Share(&_Gpu.CallOpts)
}

// Share is a free data retrieval call binding the contract method 0xa8d5fd65.
//
// Solidity: function share() view returns(uint64)
func (_Gpu *GpuCallerSession) Share() (uint64, error) {
	return _Gpu.Contract.Share(&_Gpu.CallOpts)
}

// Start is a free data retrieval call binding the contract method 0xbe9a6555.
//
// Solidity: function start() view returns(uint256)
func (_Gpu *GpuCaller) Start(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gpu.contract.Call(opts, &out, "start")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Start is a free data retrieval call binding the contract method 0xbe9a6555.
//
// Solidity: function start() view returns(uint256)
func (_Gpu *GpuSession) Start() (*big.Int, error) {
	return _Gpu.Contract.Start(&_Gpu.CallOpts)
}

// Start is a free data retrieval call binding the contract method 0xbe9a6555.
//
// Solidity: function start() view returns(uint256)
func (_Gpu *GpuCallerSession) Start() (*big.Int, error) {
	return _Gpu.Contract.Start(&_Gpu.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0xd48dca2d.
//
// Solidity: function activate(uint64 _gi, bool _s) returns()
func (_Gpu *GpuTransactor) Activate(opts *bind.TransactOpts, _gi uint64, _s bool) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "activate", _gi, _s)
}

// Activate is a paid mutator transaction binding the contract method 0xd48dca2d.
//
// Solidity: function activate(uint64 _gi, bool _s) returns()
func (_Gpu *GpuSession) Activate(_gi uint64, _s bool) (*types.Transaction, error) {
	return _Gpu.Contract.Activate(&_Gpu.TransactOpts, _gi, _s)
}

// Activate is a paid mutator transaction binding the contract method 0xd48dca2d.
//
// Solidity: function activate(uint64 _gi, bool _s) returns()
func (_Gpu *GpuTransactorSession) Activate(_gi uint64, _s bool) (*types.Transaction, error) {
	return _Gpu.Contract.Activate(&_Gpu.TransactOpts, _gi, _s)
}

// Add is a paid mutator transaction binding the contract method 0xb0c8f9dc.
//
// Solidity: function add(string _gn) returns()
func (_Gpu *GpuTransactor) Add(opts *bind.TransactOpts, _gn string) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "add", _gn)
}

// Add is a paid mutator transaction binding the contract method 0xb0c8f9dc.
//
// Solidity: function add(string _gn) returns()
func (_Gpu *GpuSession) Add(_gn string) (*types.Transaction, error) {
	return _Gpu.Contract.Add(&_Gpu.TransactOpts, _gn)
}

// Add is a paid mutator transaction binding the contract method 0xb0c8f9dc.
//
// Solidity: function add(string _gn) returns()
func (_Gpu *GpuTransactorSession) Add(_gn string) (*types.Transaction, error) {
	return _Gpu.Contract.Add(&_Gpu.TransactOpts, _gn)
}

// Check is a paid mutator transaction binding the contract method 0x919840ad.
//
// Solidity: function check() returns()
func (_Gpu *GpuTransactor) Check(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "check")
}

// Check is a paid mutator transaction binding the contract method 0x919840ad.
//
// Solidity: function check() returns()
func (_Gpu *GpuSession) Check() (*types.Transaction, error) {
	return _Gpu.Contract.Check(&_Gpu.TransactOpts)
}

// Check is a paid mutator transaction binding the contract method 0x919840ad.
//
// Solidity: function check() returns()
func (_Gpu *GpuTransactorSession) Check() (*types.Transaction, error) {
	return _Gpu.Contract.Check(&_Gpu.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xc35af429.
//
// Solidity: function mint(uint64 _gi, bytes _salt) returns()
func (_Gpu *GpuTransactor) Mint(opts *bind.TransactOpts, _gi uint64, _salt []byte) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "mint", _gi, _salt)
}

// Mint is a paid mutator transaction binding the contract method 0xc35af429.
//
// Solidity: function mint(uint64 _gi, bytes _salt) returns()
func (_Gpu *GpuSession) Mint(_gi uint64, _salt []byte) (*types.Transaction, error) {
	return _Gpu.Contract.Mint(&_Gpu.TransactOpts, _gi, _salt)
}

// Mint is a paid mutator transaction binding the contract method 0xc35af429.
//
// Solidity: function mint(uint64 _gi, bytes _salt) returns()
func (_Gpu *GpuTransactorSession) Mint(_gi uint64, _salt []byte) (*types.Transaction, error) {
	return _Gpu.Contract.Mint(&_Gpu.TransactOpts, _gi, _salt)
}

// Release is a paid mutator transaction binding the contract method 0x3ad8fe1a.
//
// Solidity: function release(uint64 _gi, uint256 _m) returns()
func (_Gpu *GpuTransactor) Release(opts *bind.TransactOpts, _gi uint64, _m *big.Int) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "release", _gi, _m)
}

// Release is a paid mutator transaction binding the contract method 0x3ad8fe1a.
//
// Solidity: function release(uint64 _gi, uint256 _m) returns()
func (_Gpu *GpuSession) Release(_gi uint64, _m *big.Int) (*types.Transaction, error) {
	return _Gpu.Contract.Release(&_Gpu.TransactOpts, _gi, _m)
}

// Release is a paid mutator transaction binding the contract method 0x3ad8fe1a.
//
// Solidity: function release(uint64 _gi, uint256 _m) returns()
func (_Gpu *GpuTransactorSession) Release(_gi uint64, _m *big.Int) (*types.Transaction, error) {
	return _Gpu.Contract.Release(&_Gpu.TransactOpts, _gi, _m)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpu *GpuTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpu *GpuSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gpu.Contract.RenounceOwnership(&_Gpu.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gpu *GpuTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gpu.Contract.RenounceOwnership(&_Gpu.TransactOpts)
}

// Rent is a paid mutator transaction binding the contract method 0x71d49a63.
//
// Solidity: function rent(uint64 _gi) returns()
func (_Gpu *GpuTransactor) Rent(opts *bind.TransactOpts, _gi uint64) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "rent", _gi)
}

// Rent is a paid mutator transaction binding the contract method 0x71d49a63.
//
// Solidity: function rent(uint64 _gi) returns()
func (_Gpu *GpuSession) Rent(_gi uint64) (*types.Transaction, error) {
	return _Gpu.Contract.Rent(&_Gpu.TransactOpts, _gi)
}

// Rent is a paid mutator transaction binding the contract method 0x71d49a63.
//
// Solidity: function rent(uint64 _gi) returns()
func (_Gpu *GpuTransactorSession) Rent(_gi uint64) (*types.Transaction, error) {
	return _Gpu.Contract.Rent(&_Gpu.TransactOpts, _gi)
}

// Set is a paid mutator transaction binding the contract method 0x58e5bd4a.
//
// Solidity: function set(uint256 _dif, uint256 _m, uint64 _s) returns()
func (_Gpu *GpuTransactor) Set(opts *bind.TransactOpts, _dif *big.Int, _m *big.Int, _s uint64) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "set", _dif, _m, _s)
}

// Set is a paid mutator transaction binding the contract method 0x58e5bd4a.
//
// Solidity: function set(uint256 _dif, uint256 _m, uint64 _s) returns()
func (_Gpu *GpuSession) Set(_dif *big.Int, _m *big.Int, _s uint64) (*types.Transaction, error) {
	return _Gpu.Contract.Set(&_Gpu.TransactOpts, _dif, _m, _s)
}

// Set is a paid mutator transaction binding the contract method 0x58e5bd4a.
//
// Solidity: function set(uint256 _dif, uint256 _m, uint64 _s) returns()
func (_Gpu *GpuTransactorSession) Set(_dif *big.Int, _m *big.Int, _s uint64) (*types.Transaction, error) {
	return _Gpu.Contract.Set(&_Gpu.TransactOpts, _dif, _m, _s)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpu *GpuTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpu *GpuSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gpu.Contract.TransferOwnership(&_Gpu.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gpu *GpuTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gpu.Contract.TransferOwnership(&_Gpu.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _m) returns()
func (_Gpu *GpuTransactor) Withdraw(opts *bind.TransactOpts, _m *big.Int) (*types.Transaction, error) {
	return _Gpu.contract.Transact(opts, "withdraw", _m)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _m) returns()
func (_Gpu *GpuSession) Withdraw(_m *big.Int) (*types.Transaction, error) {
	return _Gpu.Contract.Withdraw(&_Gpu.TransactOpts, _m)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _m) returns()
func (_Gpu *GpuTransactorSession) Withdraw(_m *big.Int) (*types.Transaction, error) {
	return _Gpu.Contract.Withdraw(&_Gpu.TransactOpts, _m)
}

// GpuAddGPUIterator is returned from FilterAddGPU and is used to iterate over the raw logs and unpacked data for AddGPU events raised by the Gpu contract.
type GpuAddGPUIterator struct {
	Event *GpuAddGPU // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpuAddGPUIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpuAddGPU)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpuAddGPU)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpuAddGPUIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpuAddGPUIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpuAddGPU represents a AddGPU event raised by the Gpu contract.
type GpuAddGPU struct {
	A   common.Address
	Gi  uint64
	Gn  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddGPU is a free log retrieval operation binding the contract event 0xfea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f70.
//
// Solidity: event AddGPU(address indexed _a, uint64 _gi, string _gn)
func (_Gpu *GpuFilterer) FilterAddGPU(opts *bind.FilterOpts, _a []common.Address) (*GpuAddGPUIterator, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Gpu.contract.FilterLogs(opts, "AddGPU", _aRule)
	if err != nil {
		return nil, err
	}
	return &GpuAddGPUIterator{contract: _Gpu.contract, event: "AddGPU", logs: logs, sub: sub}, nil
}

// WatchAddGPU is a free log subscription operation binding the contract event 0xfea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f70.
//
// Solidity: event AddGPU(address indexed _a, uint64 _gi, string _gn)
func (_Gpu *GpuFilterer) WatchAddGPU(opts *bind.WatchOpts, sink chan<- *GpuAddGPU, _a []common.Address) (event.Subscription, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Gpu.contract.WatchLogs(opts, "AddGPU", _aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpuAddGPU)
				if err := _Gpu.contract.UnpackLog(event, "AddGPU", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddGPU is a log parse operation binding the contract event 0xfea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f70.
//
// Solidity: event AddGPU(address indexed _a, uint64 _gi, string _gn)
func (_Gpu *GpuFilterer) ParseAddGPU(log types.Log) (*GpuAddGPU, error) {
	event := new(GpuAddGPU)
	if err := _Gpu.contract.UnpackLog(event, "AddGPU", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpuOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Gpu contract.
type GpuOwnershipTransferredIterator struct {
	Event *GpuOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpuOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpuOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpuOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpuOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpuOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpuOwnershipTransferred represents a OwnershipTransferred event raised by the Gpu contract.
type GpuOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpu *GpuFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GpuOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gpu.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GpuOwnershipTransferredIterator{contract: _Gpu.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpu *GpuFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GpuOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gpu.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpuOwnershipTransferred)
				if err := _Gpu.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gpu *GpuFilterer) ParseOwnershipTransferred(log types.Log) (*GpuOwnershipTransferred, error) {
	event := new(GpuOwnershipTransferred)
	if err := _Gpu.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GpuWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Gpu contract.
type GpuWithdrawIterator struct {
	Event *GpuWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GpuWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GpuWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GpuWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GpuWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GpuWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GpuWithdraw represents a Withdraw event raised by the Gpu contract.
type GpuWithdraw struct {
	A   common.Address
	M   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed _a, uint256 _m)
func (_Gpu *GpuFilterer) FilterWithdraw(opts *bind.FilterOpts, _a []common.Address) (*GpuWithdrawIterator, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Gpu.contract.FilterLogs(opts, "Withdraw", _aRule)
	if err != nil {
		return nil, err
	}
	return &GpuWithdrawIterator{contract: _Gpu.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed _a, uint256 _m)
func (_Gpu *GpuFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *GpuWithdraw, _a []common.Address) (event.Subscription, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Gpu.contract.WatchLogs(opts, "Withdraw", _aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GpuWithdraw)
				if err := _Gpu.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed _a, uint256 _m)
func (_Gpu *GpuFilterer) ParseWithdraw(log types.Log) (*GpuWithdraw, error) {
	event := new(GpuWithdraw)
	if err := _Gpu.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
