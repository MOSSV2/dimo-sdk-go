// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mul

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PlonkVerifierMetaData contains all meta data concerning the PlonkVerifier contract.
var PlonkVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50612b038061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80637e4f7a8a1461002d575b5f5ffd5b61004760048036038101906100429190612a1c565b61005d565b6040516100549190612ab4565b60405180910390f35b5f604051610240810161006f84610500565b6100798585610514565b61008286610566565b61008b87610583565b5f61009786868a610731565b90506100a281610a78565b90506100ae8189610adf565b90506100ba8189610b74565b60608301517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103610113856302000000856128e5565b08806101c086015261012684888a610be2565b61013185898d610f43565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018282089150816101a08801526101666112f2565b61016f8c612480565b6101788c6123c0565b6101818c611fbb565b61018a8c611ab8565b6101938c611817565b61019c8c611446565b610200870151975061294f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f77726f6e67206e756d626572206f66207075626c696320696e707574730000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6572726f72206d6f6420657870000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6572726f72206563206f7065726174696f6e00000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e707574732061726520626967676572207468616e207200000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e672070726f6f662073697a65000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f70656e696e677320626967676572207468616e2072000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6572726f722070616972696e67000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6572726f722076657269667900000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f722072616e646f6d2067656e206b7a670000000000000000000000006044820152606481fd5b60028114610511576105106101a9565b5b50565b5f5b81811015610561577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000833511156105505761054f6102c6565b5b602083019250600181019050610516565b505050565b60606001026103000180821461057f5761057e610325565b5b5050565b61018081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156105ba576105b9610384565b5b6101a0820190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156105f3576105f2610384565b5b6101c0820190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000008135111561062c5761062b610384565b5b6101e0820190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000008135111561066557610664610384565b5b610200820190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000008135111561069e5761069d610384565b5b610260820190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156106d7576106d6610384565b5b610300820190505f5b600181101561072c577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000008235111561071b5761071a610384565b5b6020820191506001810190506106e0565b505050565b5f60405161024081016467616d6d6181527f012f6b500cf96ed30dfbeb97477706355077f2e3b08f51764e2bbf51b707cdd060208201527f0124078c4bb149398b6a96404141b16c9bfc1ff35c89ecb8f7f7c0ba36fe34fb60408201527f09054fd45abb5a97ac93cac5a3da4206ebde98823dc04fc3f88d926a8731a46360608201527f2aba31cccba8aed8ebcc2a6c8fc961bdb028816523352b400015790648e6e21960808201527f04c7839c2433426a719c853363a2219ba82f26743d4c9b05137200cd2e4c721e60a08201527f0fb7fc64766a7b2c93839e653b16f7a91e1a26ee8835ccd4f1fca22abcb3606f60c08201527f0443aa4d18f5da5099000fea3fdb2b9e801e95ae179d8a31b2347dd856e83e5360e08201527f0941ed26606fe310e8d95280b5caf46f8162b3682ec66d288d22e0cb828613e46101008201527f28ddb0db78ffec7c235fca452ea741b87ad60adaf468316e2323034a722f715c6101208201527f2b4dcdb2d923098e84532c39de7cb5a70a8252b4c2ffc49e7a11620d71beafca6101408201527f2e6cd8a6763de80acd61c65c83f81445203281f19e64026a1fd04ac25bb46f9d6101608201527f2105cd99eb78112a445364a2951be4040659873f223fe26031fab080dc8763736101808201527f290850c45c0faa4937b1f8a16d75f16cc3db6aa7280a491544e3c9b40008a3166101a08201527f2b2db70425aa1b9be74d63c42155dfc2e0df40aa24d8b00cbb68ab6e4ca49f7c6101c08201527f2b3f5686bd0ff0f2f5455c2cc5a547e68d2e414bda588f94a08614ce4eccbfa16101e08201527f1219ce6cfa17e864a767acb9a427a30e913068db290f330646f64721540b06566102008201527f0463de98ef082ba0d1c731ee0c9158bc0662e594ed1d9ec4ba2673c283b6f6956102208201527f1ab41d409eb4b38972d624c67f4f5546b0f4d7d681871dd42a5e15b231554f2761024082015261026081016020860280888337808201915060c0808784378083019250816102c50160406001028101905060208582601b880160025afa80610a3e57610a3d610442565b5b855197507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188066040880152505050505050509392505050565b5f60405161024060405101636265746181528360208201526020816024601c840160025afa80610aab57610aaa610442565b5b815193507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184066020840152505050919050565b5f60405161024060405101606564616c70686182526020820186815260208101905061032086016001604002808284378083019250808401935060406102208901843760208585601b880160025afa80610b3c57610b3b610442565b5b855197507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188065f8801525050505050505092915050565b60405161024060405101637a657461815283602082015260c0808401604083013760208160e4601c840160025afa80610bb057610baf610442565b5b81517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066060850152505050505050565b5f60405160608101516101c082015186610bfe81888486610c7b565b5f5f5b88811015610c6e577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001883584510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018288089650602083019250602088019750600181019050610c01565b5050505050509392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e5aaf0a66b91f8030da595e7d1c6787b9b45fc54c546729acf1ff05360983096001855f5b86811015610d6b577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a84099250602082019150600181019050610cc4565b50610d77818789610e33565b869050600191505f5b86811015610e29577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a84099250600181019050610d80565b5050505050505050565b600183525f5f5b83811015610e885781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050610e3a565b5060208103820191508084019350610ec86020850160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010386516128e5565b5f5b84811015610f3b5760208603955083517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001875184098086527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182850993506020860395505050600181019050610eca565b505050505050565b5f60405160608101516101c082015161032085015f5f610f698a602085013585356110f3565b9150610f7c8a62b13eef8b018688610fb4565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180828409880896505050505050509392505050565b5f610fe085857f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a6128e5565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103840894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e5aaf0a66b91f8030da595e7d1c6787b9b45fc54c546729acf1ff0536098209905061109c8660027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103876128e5565b94507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001848209915050949350505050565b5f5f84525f60208501528160408501528260608501525f6080850153603060818501535f60828501536042608385015360536084850153604260858501536032608685015360326087850153602d608885015360506089850153606c608a850153606f608b850153606e608c850153606b608d850153600b608e850153602084608f8660025afa8061118857611187610442565b5b8451600160208701536042602187015360536022870153604260238701536032602487015360326025870153602d602687015360506027870153606c6028870153606f6029870153606e602a870153606b602b870153600b602c870153602086602d8860025afa9150816111ff576111fe610442565b5b808651186020870152600260408701536042604187015360536042870153604260438701536032604487015360326045870153602d604687015360506047870153606c6048870153606f6049870153606e604a870153606b604b870153600b604c87015360208601602081602d8360025afa92508261128157611280610442565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017001000000000000000000000000000000008851099350602087015160801c7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018186089450505050509392505050565b604051610240604051016101c08201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010360608501510861137b8360027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103836128e5565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e5aaf0a66b91f8030da595e7d1c6787b9b45fc54c546729acf1ff053609820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820991505f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992508260808601525050505050565b60405161024081016101608201518152610180820151602082015261028083013560408201526102a08301356060820152610220830135608082015261024083013560a08201526102c083013560c08201526102e083013560e082015260608201516101008201526101e08201516101208201526020816101408360025afa806114d3576114d26104a1565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182510690508160408101925061028085013581526102a0850135602082015261152383836102c0880184612841565b61016084016115388484610220890184612841565b610140850161154c84610260890183612893565b8460408101955060018152600260208201528151604082015260408160608360075afa8061157d5761157c610442565b5b6020820180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470381526115b38884878861270d565b876040890198506115ce8960608c01516102808e01846127bc565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a60608c0151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818a09985061164c8a8a6102c08f0185612841565b6116588a83898a61270d565b6020880180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815287518b52602088015160208c01527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408c01527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608c01527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808c01527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08c0152885160c08c0152602089015160e08c01527ef30dd7827a6227853d4e57718c1d58d9bbd944cf7b6413c4e3b830c69e20126101008c01527f1ff585af5763615da952b63dd7752d725a9f3936111f099466996af171a90ef26101208c01527f047bc7e18e26e6453665d28c64153bebc3becc11898a6cbd297cb63d63bbf87e6101408c01527f0108ad3114af3e6761a8099fb001c3f2ff7f4b31bad965a08c627c510ea30f2d6101608c01526117dd8b6117ec565b50505050505050505050505050565b60405160205f6101808460085afa80611808576118076103e3565b5b5f518061020084015250505050565b6040516102406040510160208101604082016101e084015180610160860160e0870151815261010087015161018088015261012087015161014088015261186286835f8b0184612841565b611875826101808a016101408a01612893565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991506118aa868360408b0184612841565b6118bd826101a08a016101408a01612893565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991506118f2868360808b0184612841565b611905826101c08a016101408a01612893565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f012f6b500cf96ed30dfbeb97477706355077f2e3b08f51764e2bbf51b707cdd086527f0124078c4bb149398b6a96404141b16c9bfc1ff35c89ecb8f7f7c0ba36fe34fb855261197d848388846127ef565b611990826101e08a016101408a01612893565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f09054fd45abb5a97ac93cac5a3da4206ebde98823dc04fc3f88d926a8731a46386527f2aba31cccba8aed8ebcc2a6c8fc961bdb028816523352b400015790648e6e2198552611a08848388846127ef565b611a1b826102008a016101408a01612893565b61030088017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184840992507f0463de98ef082ba0d1c731ee0c9158bc0662e594ed1d9ec4ba2673c283b6f69587527f1ab41d409eb4b38972d624c67f4f5546b0f4d7d681871dd42a5e15b231554f278652611a98858489856127ef565b611aa783826101408b01612893565b602081019050505050505050505050565b604051610240604051016467616d6d6181526060820151602082015260e08201516040820152610100820151606082015260c05f840160808301377f012f6b500cf96ed30dfbeb97477706355077f2e3b08f51764e2bbf51b707cdd06101408201527f0124078c4bb149398b6a96404141b16c9bfc1ff35c89ecb8f7f7c0ba36fe34fb6101608201527f09054fd45abb5a97ac93cac5a3da4206ebde98823dc04fc3f88d926a8731a4636101808201527f2aba31cccba8aed8ebcc2a6c8fc961bdb028816523352b400015790648e6e2196101a08201526101c07f0463de98ef082ba0d1c731ee0c9158bc0662e594ed1d9ec4ba2673c283b6f695818301527f1ab41d409eb4b38972d624c67f4f5546b0f4d7d681871dd42a5e15b231554f276020820183015260408101905061012083015181830152610180840135602082018301526101a0840135604082018301526101c0840135606082018301526101e08401356080820183015261020084013560a0820183015260c081018201610300850160206001028183376020600102820191506102608601358252601b600360010260140160208102600501905060206101e088018284890160025afa80611c8457611c83610442565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e0890151066101e0890152505050505050505050565b604051610240604051017f0443aa4d18f5da5099000fea3fdb2b9e801e95ae179d8a31b2347dd856e83e5381527f0941ed26606fe310e8d95280b5caf46f8162b3682ec66d288d22e0cb828613e46020820152611d27604082016101808501358360e08601612789565b7f28ddb0db78ffec7c235fca452ea741b87ad60adaf468316e2323034a722f715c81527f2b4dcdb2d923098e84532c39de7cb5a70a8252b4c2ffc49e7a11620d71beafca6020820152611d87604082016101a08501358360e086016127ef565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0840135610180850135097f2e6cd8a6763de80acd61c65c83f81445203281f19e64026a1fd04ac25bb46f9d82527f2105cd99eb78112a445364a2951be4040659873f223fe26031fab080dc8763736020830152611e1060408301828460e087016127ef565b7f290850c45c0faa4937b1f8a16d75f16cc3db6aa7280a491544e3c9b40008a31682527f2b2db70425aa1b9be74d63c42155dfc2e0df40aa24d8b00cbb68ab6e4ca49f7c6020830152611e70604083016101c08601358460e087016127ef565b7f2b3f5686bd0ff0f2f5455c2cc5a547e68d2e414bda588f94a08614ce4eccbfa182527f1219ce6cfa17e864a767acb9a427a30e913068db290f330646f64721540b06566020830152611ece604083018360e0860160e0870161270d565b610300840161032085015f5b6001811015611f1b578135855260208201356020860152611f046040860184358760e08a016127ef565b602083019250604082019150600181019050611eda565b507f04c7839c2433426a719c853363a2219ba82f26743d4c9b05137200cd2e4c721e84527f0fb7fc64766a7b2c93839e653b16f7a91e1a26ee8835ccd4f1fca22abcb3606f6020850152611f7760408501888660e089016127ef565b61022086013584526102408601356020850152611f9c60408501898660e089016127ef565b611fb18460a0870160e0880160e0890161270d565b5050505050505050565b6040516020810151604082015160608301515f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610260880135097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e088013586097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180890135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020089013587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08a0135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808d0135820895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189870895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016005820994507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08d0135860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08d0135850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099050807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010390507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808d0151820890506123b181858f611cbd565b50505050505050505050505050565b6040516002630200000001610240604051016123e1818360608601516128e5565b6123f48282610140880160a088016127bc565b61240a82610100870160a0870160a0880161274b565b61241c828260a0870160a08801612789565b6124318260c0870160a0870160a0880161274b565b612448826101c086015160a0870160a08801612789565b60c0840151807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470390508060c0860152505050505050565b6040515f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516101e08501350990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040830151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180840135820890505f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102008601350990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040840151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0850135820890505f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101c08701350890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000015f850151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260860135840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08501518408925060808401519150817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010391507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284089250827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039250826101208501525050505050565b8151845260208201516020850152825160408501526020830151606085015260408160808660065afa8061274457612743610267565b5b5050505050565b8151845260208201516020850152823560408501526020830135606085015260408160808660065afa8061278257612781610267565b5b5050505050565b815184526020820151602085015282604085015260408160608660075afa806127b5576127b4610267565b5b5050505050565b813584526020820135602085015282604085015260408160608660075afa806127e8576127e7610267565b5b5050505050565b815184526020820151602085015282604085015260408460608660075afa815160408601526020820151606086015260408260808760065afa811690508061283a57612839610267565b5b5050505050565b813584526020820135602085015282604085015260408460608660075afa815160408601526020820151606086015260408260808760065afa811690508061288c5761288b610267565b5b5050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838335097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b5f60208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660055afa5f810361294357612942610208565b5b84519150509392505050565b50505050505050949350505050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261298757612986612966565b5b8235905067ffffffffffffffff8111156129a4576129a361296a565b5b6020830191508360018202830111156129c0576129bf61296e565b5b9250929050565b5f5f83601f8401126129dc576129db612966565b5b8235905067ffffffffffffffff8111156129f9576129f861296a565b5b602083019150836020820283011115612a1557612a1461296e565b5b9250929050565b5f5f5f5f60408587031215612a3457612a3361295e565b5b5f85013567ffffffffffffffff811115612a5157612a50612962565b5b612a5d87828801612972565b9450945050602085013567ffffffffffffffff811115612a8057612a7f612962565b5b612a8c878288016129c7565b925092505092959194509250565b5f8115159050919050565b612aae81612a9a565b82525050565b5f602082019050612ac75f830184612aa5565b9291505056fea264697066735822122010b344e0a5d3686d1ed894c744884c57184b7cf852a7331445fe58c75945bee764736f6c634300081c0033",
}

// PlonkVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use PlonkVerifierMetaData.ABI instead.
var PlonkVerifierABI = PlonkVerifierMetaData.ABI

// PlonkVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PlonkVerifierMetaData.Bin instead.
var PlonkVerifierBin = PlonkVerifierMetaData.Bin

// DeployPlonkVerifier deploys a new Ethereum contract, binding an instance of PlonkVerifier to it.
func DeployPlonkVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PlonkVerifier, error) {
	parsed, err := PlonkVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PlonkVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PlonkVerifier{PlonkVerifierCaller: PlonkVerifierCaller{contract: contract}, PlonkVerifierTransactor: PlonkVerifierTransactor{contract: contract}, PlonkVerifierFilterer: PlonkVerifierFilterer{contract: contract}}, nil
}

// PlonkVerifier is an auto generated Go binding around an Ethereum contract.
type PlonkVerifier struct {
	PlonkVerifierCaller     // Read-only binding to the contract
	PlonkVerifierTransactor // Write-only binding to the contract
	PlonkVerifierFilterer   // Log filterer for contract events
}

// PlonkVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type PlonkVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PlonkVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PlonkVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PlonkVerifierSession struct {
	Contract     *PlonkVerifier    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PlonkVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PlonkVerifierCallerSession struct {
	Contract *PlonkVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PlonkVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PlonkVerifierTransactorSession struct {
	Contract     *PlonkVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PlonkVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type PlonkVerifierRaw struct {
	Contract *PlonkVerifier // Generic contract binding to access the raw methods on
}

// PlonkVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PlonkVerifierCallerRaw struct {
	Contract *PlonkVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// PlonkVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PlonkVerifierTransactorRaw struct {
	Contract *PlonkVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPlonkVerifier creates a new instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifier(address common.Address, backend bind.ContractBackend) (*PlonkVerifier, error) {
	contract, err := bindPlonkVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifier{PlonkVerifierCaller: PlonkVerifierCaller{contract: contract}, PlonkVerifierTransactor: PlonkVerifierTransactor{contract: contract}, PlonkVerifierFilterer: PlonkVerifierFilterer{contract: contract}}, nil
}

// NewPlonkVerifierCaller creates a new read-only instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifierCaller(address common.Address, caller bind.ContractCaller) (*PlonkVerifierCaller, error) {
	contract, err := bindPlonkVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifierCaller{contract: contract}, nil
}

// NewPlonkVerifierTransactor creates a new write-only instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*PlonkVerifierTransactor, error) {
	contract, err := bindPlonkVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifierTransactor{contract: contract}, nil
}

// NewPlonkVerifierFilterer creates a new log filterer instance of PlonkVerifier, bound to a specific deployed contract.
func NewPlonkVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*PlonkVerifierFilterer, error) {
	contract, err := bindPlonkVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PlonkVerifierFilterer{contract: contract}, nil
}

// bindPlonkVerifier binds a generic wrapper to an already deployed contract.
func bindPlonkVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PlonkVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PlonkVerifier *PlonkVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PlonkVerifier.Contract.PlonkVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PlonkVerifier *PlonkVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.PlonkVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PlonkVerifier *PlonkVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.PlonkVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PlonkVerifier *PlonkVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PlonkVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PlonkVerifier *PlonkVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PlonkVerifier *PlonkVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PlonkVerifier.Contract.contract.Transact(opts, method, params...)
}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_PlonkVerifier *PlonkVerifierCaller) Verify(opts *bind.CallOpts, proof []byte, public_inputs []*big.Int) (bool, error) {
	var out []interface{}
	err := _PlonkVerifier.contract.Call(opts, &out, "Verify", proof, public_inputs)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_PlonkVerifier *PlonkVerifierSession) Verify(proof []byte, public_inputs []*big.Int) (bool, error) {
	return _PlonkVerifier.Contract.Verify(&_PlonkVerifier.CallOpts, proof, public_inputs)
}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_PlonkVerifier *PlonkVerifierCallerSession) Verify(proof []byte, public_inputs []*big.Int) (bool, error) {
	return _PlonkVerifier.Contract.Verify(&_PlonkVerifier.CallOpts, proof, public_inputs)
}
