// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package round

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRoundChal is an auto generated low-level Go binding around an user-defined struct.
type IRoundChal struct {
	Chal  *big.Int
	Prove *big.Int
	Count uint64
	Round uint64
	Sum   []byte
	Ccs   []IRoundComAt
}

// IRoundComAt is an auto generated low-level Go binding around an user-defined struct.
type IRoundComAt struct {
	QIndex uint64
	Com    [][]byte
}

// RoundMetaData contains all meta data concerning the Round contract.
var RoundMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ep\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_qIndex\",\"type\":\"uint64\"}],\"name\":\"chalCom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ep\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_count\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_com\",\"type\":\"bytes\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ep\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_qIndex\",\"type\":\"uint64\"}],\"name\":\"checkOne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ep\",\"type\":\"uint64\"}],\"name\":\"checkSum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_count\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"choose\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_cnt\",\"type\":\"uint64\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_order\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_e\",\"type\":\"uint64\"}],\"name\":\"getRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prove\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"round\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sum\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"qIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"com\",\"type\":\"bytes[]\"}],\"internalType\":\"structIRound.ComAt[]\",\"name\":\"ccs\",\"type\":\"tuple[]\"}],\"internalType\":\"structIRound.Chal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ep\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"_com\",\"type\":\"bytes[]\"}],\"name\":\"proveCom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotsInChal\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405260b4600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200003b57600080fd5b5060405162003f0338038062003f03833981810160405281019062000061919062000112565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000144565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000da82620000ad565b9050919050565b620000ec81620000cd565b8114620000f857600080fd5b50565b6000815190506200010c81620000e1565b92915050565b6000602082840312156200012b576200012a620000a8565b5b60006200013b84828501620000fb565b91505092915050565b613daf80620001546000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806396d5f5cb1161006657806396d5f5cb14610145578063ad30692214610175578063cdf9d07c146101a5578063d48e0ba4146101d5578063e19a52be146101f35761009e565b8063098302e2146100a35780630b17c321146100bf578063457964b1146100db57806373582bc6146100f757806376cdb03b14610127575b600080fd5b6100bd60048036038101906100b891906126f2565b610223565b005b6100d960048036038101906100d4919061285b565b61051e565b005b6100f560048036038101906100f091906128ca565b610899565b005b610111600480360381019061010c919061291d565b610d1f565b60405161011e9190612c55565b60405180910390f35b61012f6111f6565b60405161013c9190612c86565b60405180910390f35b61015f600480360381019061015a91906128ca565b61121a565b60405161016c9190612cbc565b60405180910390f35b61018f600480360381019061018a919061291d565b611a07565b60405161019c9190612cbc565b60405180910390f35b6101bf60048036038101906101ba9190612cd7565b61214a565b6040516101cc9190612d13565b60405180910390f35b6101dd61215c565b6040516101ea9190612d13565b60405180910390f35b61020d60048036038101906102089190612d64565b612176565b60405161021a9190612d13565b60405180910390f35b61022b61218e565b61023482612297565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555043600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206000018190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600301908161042f9190612fd7565b506104386123b2565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160010190805190602001906105149291906123d6565b5050505050505050565b61052661218e565b600881511461056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056190613106565b60405180910390fd5b600060149054906101000a900467ffffffffffffffff1667ffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600001546105fd9190613155565b431161063e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610635906131d5565b60405180910390fd5b43600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010181905550600060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206004018054905061072291906131f5565b90506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600401828154811061079f5761079e613229565b5b906000526020600020906002020160010180549050146107f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107eb906132a4565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600401828154811061086e5761086d613229565b5b906000526020600020906002020160010190805190602001906108929291906123d6565b5050505050565b6108a161218e565b600060149054906101000a900467ffffffffffffffff1667ffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101546109349190613155565b4311610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c906131d5565b60405180910390fd5b43600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600001819055506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600401805490509050600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff161115610b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1990613310565b60405180910390fd5b8167ffffffffffffffff16600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600401600183610ba19190613330565b67ffffffffffffffff1681548110610bbc57610bbb613229565b5b90600052602060002090600202016001018054905011610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c08906133b8565b60405180910390fd5b610c196123b2565b82816000019067ffffffffffffffff16908167ffffffffffffffff1681525050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506020820151816001019080519060200190610d159291906123d6565b5050505050505050565b610d2761242f565b610d2f61242f565b6040518060c00160405280600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600001548152602001600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101548152602001600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206003018054610f9c90612dfa565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc890612dfa565b80156110155780601f10610fea57610100808354040283529160200191611015565b820191906000526020600020905b815481529060010190602001808311610ff857829003601f168201915b50505050508152602001600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600401805480602002602001604051908101604052809291908181526020016000905b828210156111e357838290600052602060002090600202016040518060400160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156111cc57838290600052602060002001805461113f90612dfa565b80601f016020809104026020016040519081016040528092919081815260200182805461116b90612dfa565b80156111b85780601f1061118d576101008083540402835291602001916111b8565b820191906000526020600020905b81548152906001019060200180831161119b57829003601f168201915b505050505081526020019060010190611120565b5050505081525050815260200190600101906110a6565b5050505081525090508091505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061122461218e565b600060018060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206004018054905061129c9190613330565b9050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1660018261133191906133d8565b67ffffffffffffffff161461137b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137290613460565b60405180910390fd5b600083905060008290505b60008167ffffffffffffffff16111561146e57600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008767ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206004018167ffffffffffffffff168154811061141c5761141b613229565b5b906000526020600020906002020160000160009054906101000a900467ffffffffffffffff1660088361144f9190613480565b61145991906133d8565b91508080611466906134bd565b915050611386565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b81526004016114c990613532565b6020604051808303816000875af11580156114e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150c9190613567565b73ffffffffffffffffffffffffffffffffffffffff166312a02c8260018861153491906133d8565b6040518263ffffffff1660e01b81526004016115509190612d13565b60408051808303816000875af115801561156e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159291906135d5565b91505061161c8782600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900467ffffffffffffffff168561234d565b915060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b815260040161167890613661565b6020604051808303816000875af1158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190613567565b905060008173ffffffffffffffffffffffffffffffffffffffff16636f3e37b18a866040518363ffffffff1660e01b81526004016116fa929190613681565b6000604051808303816000875af1158015611719573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611742919061371a565b90508767ffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663accbe33b836040518263ffffffff1660e01b815260040161178891906137ad565b602060405180830381865afa1580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c991906137e4565b67ffffffffffffffff161161182957600067ffffffffffffffff8111156117f3576117f26125c7565b5b6040519080825280601f01601f1916602001820160405280156118255781602001600182028036833780820191505090505b5090505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b81526004016118809061385d565b6020604051808303816000875af115801561189f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c39190613567565b73ffffffffffffffffffffffffffffffffffffffff1663235266d282600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c67ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206004018867ffffffffffffffff168154811061196257611961613229565b5b90600052602060002090600202016001018a67ffffffffffffffff168154811061198f5761198e613229565b5b906000526020600020016040518363ffffffff1660e01b81526004016119b6929190613901565b6020604051808303816000875af11580156119d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f99190613964565b955050505050509392505050565b6000611a1161218e565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000154600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010154108015611b7f5750600060149054906101000a900467ffffffffffffffff1667ffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000154611b7c9190613155565b43115b15611b8d5760009050612144565b600060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060040180549050611c0591906131f5565b90506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206003018054611c7b90612dfa565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca790612dfa565b8015611cf45780601f10611cc957610100808354040283529160200191611cf4565b820191906000526020600020905b815481529060010190602001808311611cd757829003601f168201915b5050505050905060008267ffffffffffffffff161115611f0857600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600401600183611d829190613330565b67ffffffffffffffff1681548110611d9d57611d9c613229565b5b9060005260206000209060020201600101600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206004018367ffffffffffffffff1681548110611e3157611e30613229565b5b906000526020600020906002020160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1681548110611e7257611e71613229565b5b906000526020600020018054611e8790612dfa565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb390612dfa565b8015611f005780601f10611ed557610100808354040283529160200191611f00565b820191906000526020600020905b815481529060010190602001808311611ee357829003601f168201915b505050505090505b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401611f629061385d565b6020604051808303816000875af1158015611f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa59190613567565b905060008173ffffffffffffffffffffffffffffffffffffffff1663b2bd8933600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008967ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206004018667ffffffffffffffff168154811061204857612047613229565b5b90600052602060002090600202016001016040518263ffffffff1660e01b81526004016120759190613adb565b6000604051808303816000875af1158015612094573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120bd919061371a565b90508173ffffffffffffffffffffffffffffffffffffffff1663235266d282856040518363ffffffff1660e01b81526004016120fa929190613afd565b6020604051808303816000875af1158015612119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213d9190613964565b9450505050505b92915050565b600061215582612297565b9050919050565b600060149054906101000a900467ffffffffffffffff1681565b60006121848585858561234d565b9050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b81526004016121e590613b80565b6020604051808303816000875af1158015612204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122289190613567565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228c90613bec565b60405180910390fd5b565b6000808267ffffffffffffffff16036122b35760009050612348565b5b60008267ffffffffffffffff1611156122ea576001816122d491906133d8565b90506008826122e39190613c3b565b91506122b4565b60008167ffffffffffffffff160361230157600190505b60048167ffffffffffffffff161115612324576001816123219190613330565b90505b60068167ffffffffffffffff161115612347576001816123449190613330565b90505b5b919050565b6000808367ffffffffffffffff1611156123a7578267ffffffffffffffff1684868460405160200161238193929190613d0b565b6040516020818303038152906040528051906020012060001c6123a49190613d48565b92505b829050949350505050565b6040518060400160405280600067ffffffffffffffff168152602001606081525090565b82805482825590600052602060002090810192821561241e579160200282015b8281111561241d57825182908161240d9190612fd7565b50916020019190600101906123f6565b5b50905061242b9190612479565b5090565b6040518060c001604052806000815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160608152602001606081525090565b5b808211156124995760008181612490919061249d565b5060010161247a565b5090565b5080546124a990612dfa565b6000825580601f106124bb57506124da565b601f0160209004906000526020600020908101906124d991906124dd565b5b50565b5b808211156124f65760008160009055506001016124de565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125398261250e565b9050919050565b6125498161252e565b811461255457600080fd5b50565b60008135905061256681612540565b92915050565b600067ffffffffffffffff82169050919050565b6125898161256c565b811461259457600080fd5b50565b6000813590506125a681612580565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6125ff826125b6565b810181811067ffffffffffffffff8211171561261e5761261d6125c7565b5b80604052505050565b60006126316124fa565b905061263d82826125f6565b919050565b600067ffffffffffffffff82111561265d5761265c6125c7565b5b612666826125b6565b9050602081019050919050565b82818337600083830152505050565b600061269561269084612642565b612627565b9050828152602081018484840111156126b1576126b06125b1565b5b6126bc848285612673565b509392505050565b600082601f8301126126d9576126d86125ac565b5b81356126e9848260208601612682565b91505092915050565b6000806000806080858703121561270c5761270b612504565b5b600061271a87828801612557565b945050602061272b87828801612597565b935050604061273c87828801612597565b925050606085013567ffffffffffffffff81111561275d5761275c612509565b5b612769878288016126c4565b91505092959194509250565b600067ffffffffffffffff8211156127905761278f6125c7565b5b602082029050602081019050919050565b600080fd5b60006127b96127b484612775565b612627565b905080838252602082019050602084028301858111156127dc576127db6127a1565b5b835b8181101561282357803567ffffffffffffffff811115612801576128006125ac565b5b80860161280e89826126c4565b855260208501945050506020810190506127de565b5050509392505050565b600082601f830112612842576128416125ac565b5b81356128528482602086016127a6565b91505092915050565b60008060006060848603121561287457612873612504565b5b600061288286828701612557565b935050602061289386828701612597565b925050604084013567ffffffffffffffff8111156128b4576128b3612509565b5b6128c08682870161282d565b9150509250925092565b6000806000606084860312156128e3576128e2612504565b5b60006128f186828701612557565b935050602061290286828701612597565b925050604061291386828701612597565b9150509250925092565b6000806040838503121561293457612933612504565b5b600061294285828601612557565b925050602061295385828601612597565b9150509250929050565b6000819050919050565b6129708161295d565b82525050565b61297f8161256c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156129bf5780820151818401526020810190506129a4565b60008484015250505050565b60006129d682612985565b6129e08185612990565b93506129f08185602086016129a1565b6129f9816125b6565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612a6883836129cb565b905092915050565b6000602082019050919050565b6000612a8882612a30565b612a928185612a3b565b935083602082028501612aa485612a4c565b8060005b85811015612ae05784840389528151612ac18582612a5c565b9450612acc83612a70565b925060208a01995050600181019050612aa8565b50829750879550505050505092915050565b6000604083016000830151612b0a6000860182612976565b5060208301518482036020860152612b228282612a7d565b9150508091505092915050565b6000612b3b8383612af2565b905092915050565b6000602082019050919050565b6000612b5b82612a04565b612b658185612a0f565b935083602082028501612b7785612a20565b8060005b85811015612bb35784840389528151612b948582612b2f565b9450612b9f83612b43565b925060208a01995050600181019050612b7b565b50829750879550505050505092915050565b600060c083016000830151612bdd6000860182612967565b506020830151612bf06020860182612967565b506040830151612c036040860182612976565b506060830151612c166060860182612976565b5060808301518482036080860152612c2e82826129cb565b91505060a083015184820360a0860152612c488282612b50565b9150508091505092915050565b60006020820190508181036000830152612c6f8184612bc5565b905092915050565b612c808161252e565b82525050565b6000602082019050612c9b6000830184612c77565b92915050565b60008115159050919050565b612cb681612ca1565b82525050565b6000602082019050612cd16000830184612cad565b92915050565b600060208284031215612ced57612cec612504565b5b6000612cfb84828501612597565b91505092915050565b612d0d8161256c565b82525050565b6000602082019050612d286000830184612d04565b92915050565b6000819050919050565b612d4181612d2e565b8114612d4c57600080fd5b50565b600081359050612d5e81612d38565b92915050565b60008060008060808587031215612d7e57612d7d612504565b5b6000612d8c87828801612557565b9450506020612d9d87828801612d4f565b9350506040612dae87828801612597565b9250506060612dbf87828801612597565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e1257607f821691505b602082108103612e2557612e24612dcb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e8d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e50565b612e978683612e50565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612ed4612ecf612eca8461295d565b612eaf565b61295d565b9050919050565b6000819050919050565b612eee83612eb9565b612f02612efa82612edb565b848454612e5d565b825550505050565b600090565b612f17612f0a565b612f22818484612ee5565b505050565b5b81811015612f4657612f3b600082612f0f565b600181019050612f28565b5050565b601f821115612f8b57612f5c81612e2b565b612f6584612e40565b81016020851015612f74578190505b612f88612f8085612e40565b830182612f27565b50505b505050565b600082821c905092915050565b6000612fae60001984600802612f90565b1980831691505092915050565b6000612fc78383612f9d565b9150826002028217905092915050565b612fe082612985565b67ffffffffffffffff811115612ff957612ff86125c7565b5b6130038254612dfa565b61300e828285612f4a565b600060209050601f831160018114613041576000841561302f578287015190505b6130398582612fbb565b8655506130a1565b601f19841661304f86612e2b565b60005b8281101561307757848901518255600182019150602085019450602081019050613052565b868310156130945784890151613090601f891682612f9d565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f696e76616c696420636f6d000000000000000000000000000000000000000000600082015250565b60006130f0600b836130a9565b91506130fb826130ba565b602082019050919050565b6000602082019050818103600083015261311f816130e3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131608261295d565b915061316b8361295d565b925082820190508082111561318357613182613126565b5b92915050565b7f74696d656f757400000000000000000000000000000000000000000000000000600082015250565b60006131bf6007836130a9565b91506131ca82613189565b602082019050919050565b600060208201905081810360008301526131ee816131b2565b9050919050565b60006132008261295d565b915061320b8361295d565b925082820390508181111561322357613222613126565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f616c726561647920686173000000000000000000000000000000000000000000600082015250565b600061328e600b836130a9565b915061329982613258565b602082019050919050565b600060208201905081810360008301526132bd81613281565b9050919050565b7f65786365656420726f756e640000000000000000000000000000000000000000600082015250565b60006132fa600c836130a9565b9150613305826132c4565b602082019050919050565b60006020820190508181036000830152613329816132ed565b9050919050565b600061333b8261256c565b91506133468361256c565b9250828203905067ffffffffffffffff81111561336657613365613126565b5b92915050565b7f696e76616c69642071496e646578000000000000000000000000000000000000600082015250565b60006133a2600e836130a9565b91506133ad8261336c565b602082019050919050565b600060208201905081810360008301526133d181613395565b9050919050565b60006133e38261256c565b91506133ee8361256c565b9250828201905067ffffffffffffffff81111561340e5761340d613126565b5b92915050565b7f696e73756620726f756e64000000000000000000000000000000000000000000600082015250565b600061344a600b836130a9565b915061345582613414565b602082019050919050565b600060208201905081810360008301526134798161343d565b9050919050565b600061348b8261256c565b91506134968361256c565b92508282026134a48161256c565b91508082146134b6576134b5613126565b5b5092915050565b60006134c88261256c565b9150600082036134db576134da613126565b5b600182039050919050565b7f65706f6368000000000000000000000000000000000000000000000000000000600082015250565b600061351c6005836130a9565b9150613527826134e6565b602082019050919050565b6000602082019050818103600083015261354b8161350f565b9050919050565b60008151905061356181612540565b92915050565b60006020828403121561357d5761357c612504565b5b600061358b84828501613552565b91505092915050565b61359d8161295d565b81146135a857600080fd5b50565b6000815190506135ba81613594565b92915050565b6000815190506135cf81612d38565b92915050565b600080604083850312156135ec576135eb612504565b5b60006135fa858286016135ab565b925050602061360b858286016135c0565b9150509250929050565b7f66696c6500000000000000000000000000000000000000000000000000000000600082015250565b600061364b6004836130a9565b915061365682613615565b602082019050919050565b6000602082019050818103600083015261367a8161363e565b9050919050565b60006040820190506136966000830185612c77565b6136a36020830184612d04565b9392505050565b60006136bd6136b884612642565b612627565b9050828152602081018484840111156136d9576136d86125b1565b5b6136e48482856129a1565b509392505050565b600082601f830112613701576137006125ac565b5b81516137118482602086016136aa565b91505092915050565b6000602082840312156137305761372f612504565b5b600082015167ffffffffffffffff81111561374e5761374d612509565b5b61375a848285016136ec565b91505092915050565b600082825260208201905092915050565b600061377f82612985565b6137898185613763565b93506137998185602086016129a1565b6137a2816125b6565b840191505092915050565b600060208201905081810360008301526137c78184613774565b905092915050565b6000815190506137de81612580565b92915050565b6000602082840312156137fa576137f9612504565b5b6000613808848285016137cf565b91505092915050565b7f626c730000000000000000000000000000000000000000000000000000000000600082015250565b60006138476003836130a9565b915061385282613811565b602082019050919050565b600060208201905081810360008301526138768161383a565b9050919050565b6000815461388a81612dfa565b6138948186613763565b945060018216600081146138af57600181146138c5576138f8565b60ff1983168652811515602002860193506138f8565b6138ce85612e2b565b60005b838110156138f0578154818901526001820191506020810190506138d1565b808801955050505b50505092915050565b6000604082019050818103600083015261391b8185613774565b9050818103602083015261392f818461387d565b90509392505050565b61394181612ca1565b811461394c57600080fd5b50565b60008151905061395e81613938565b92915050565b60006020828403121561397a57613979612504565b5b60006139888482850161394f565b91505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b600081546139cf81612dfa565b6139d98186612990565b945060018216600081146139f45760018114613a0a57613a3d565b60ff198316865281151560200286019350613a3d565b613a1385612e2b565b60005b83811015613a3557815481890152600182019150602081019050613a16565b808801955050505b50505092915050565b6000613a5283836139c2565b905092915050565b6000600182019050919050565b6000613a7282613991565b613a7c818561399c565b935083602082028501613a8e856139ad565b8060005b85811015613ac957848403895281613aaa8582613a46565b9450613ab583613a5a565b925060208a01995050600181019050613a92565b50829750879550505050505092915050565b60006020820190508181036000830152613af58184613a67565b905092915050565b60006040820190508181036000830152613b178185613774565b90508181036020830152613b2b8184613774565b90509392505050565b7f70726f6f66000000000000000000000000000000000000000000000000000000600082015250565b6000613b6a6005836130a9565b9150613b7582613b34565b602082019050919050565b60006020820190508181036000830152613b9981613b5d565b9050919050565b7f696e76616c696420630000000000000000000000000000000000000000000000600082015250565b6000613bd66009836130a9565b9150613be182613ba0565b602082019050919050565b60006020820190508181036000830152613c0581613bc9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c468261256c565b9150613c518361256c565b925082613c6157613c60613c0c565b5b828204905092915050565b6000819050919050565b613c87613c8282612d2e565b613c6c565b82525050565b60008160601b9050919050565b6000613ca582613c8d565b9050919050565b6000613cb782613c9a565b9050919050565b613ccf613cca8261252e565b613cac565b82525050565b60008160c01b9050919050565b6000613ced82613cd5565b9050919050565b613d05613d008261256c565b613ce2565b82525050565b6000613d178286613c76565b602082019150613d278285613cbe565b601482019150613d378284613cf4565b600882019150819050949350505050565b6000613d538261295d565b9150613d5e8361295d565b925082613d6e57613d6d613c0c565b5b82820690509291505056fea2646970667358221220e5e9429c363b625226b5ac7b0e32387e99b6776b3bfabc0be37b896fe812762764736f6c63430008180033",
}

// RoundABI is the input ABI used to generate the binding from.
// Deprecated: Use RoundMetaData.ABI instead.
var RoundABI = RoundMetaData.ABI

// RoundBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RoundMetaData.Bin instead.
var RoundBin = RoundMetaData.Bin

// DeployRound deploys a new Ethereum contract, binding an instance of Round to it.
func DeployRound(auth *bind.TransactOpts, backend bind.ContractBackend, _b common.Address) (common.Address, *types.Transaction, *Round, error) {
	parsed, err := RoundMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RoundBin), backend, _b)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Round{RoundCaller: RoundCaller{contract: contract}, RoundTransactor: RoundTransactor{contract: contract}, RoundFilterer: RoundFilterer{contract: contract}}, nil
}

// Round is an auto generated Go binding around an Ethereum contract.
type Round struct {
	RoundCaller     // Read-only binding to the contract
	RoundTransactor // Write-only binding to the contract
	RoundFilterer   // Log filterer for contract events
}

// RoundCaller is an auto generated read-only Go binding around an Ethereum contract.
type RoundCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RoundTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RoundTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RoundFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RoundFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RoundSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RoundSession struct {
	Contract     *Round            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RoundCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RoundCallerSession struct {
	Contract *RoundCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// RoundTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RoundTransactorSession struct {
	Contract     *RoundTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RoundRaw is an auto generated low-level Go binding around an Ethereum contract.
type RoundRaw struct {
	Contract *Round // Generic contract binding to access the raw methods on
}

// RoundCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RoundCallerRaw struct {
	Contract *RoundCaller // Generic read-only contract binding to access the raw methods on
}

// RoundTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RoundTransactorRaw struct {
	Contract *RoundTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRound creates a new instance of Round, bound to a specific deployed contract.
func NewRound(address common.Address, backend bind.ContractBackend) (*Round, error) {
	contract, err := bindRound(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Round{RoundCaller: RoundCaller{contract: contract}, RoundTransactor: RoundTransactor{contract: contract}, RoundFilterer: RoundFilterer{contract: contract}}, nil
}

// NewRoundCaller creates a new read-only instance of Round, bound to a specific deployed contract.
func NewRoundCaller(address common.Address, caller bind.ContractCaller) (*RoundCaller, error) {
	contract, err := bindRound(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RoundCaller{contract: contract}, nil
}

// NewRoundTransactor creates a new write-only instance of Round, bound to a specific deployed contract.
func NewRoundTransactor(address common.Address, transactor bind.ContractTransactor) (*RoundTransactor, error) {
	contract, err := bindRound(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RoundTransactor{contract: contract}, nil
}

// NewRoundFilterer creates a new log filterer instance of Round, bound to a specific deployed contract.
func NewRoundFilterer(address common.Address, filterer bind.ContractFilterer) (*RoundFilterer, error) {
	contract, err := bindRound(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RoundFilterer{contract: contract}, nil
}

// bindRound binds a generic wrapper to an already deployed contract.
func bindRound(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RoundMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Round *RoundRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Round.Contract.RoundCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Round *RoundRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Round.Contract.RoundTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Round *RoundRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Round.Contract.RoundTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Round *RoundCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Round.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Round *RoundTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Round.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Round *RoundTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Round.Contract.contract.Transact(opts, method, params...)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Round *RoundCaller) Bank(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Round.contract.Call(opts, &out, "bank")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Round *RoundSession) Bank() (common.Address, error) {
	return _Round.Contract.Bank(&_Round.CallOpts)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Round *RoundCallerSession) Bank() (common.Address, error) {
	return _Round.Contract.Bank(&_Round.CallOpts)
}

// Choose is a free data retrieval call binding the contract method 0xe19a52be.
//
// Solidity: function choose(address _a, bytes32 _seed, uint64 _count, uint64 _index) pure returns(uint64)
func (_Round *RoundCaller) Choose(opts *bind.CallOpts, _a common.Address, _seed [32]byte, _count uint64, _index uint64) (uint64, error) {
	var out []interface{}
	err := _Round.contract.Call(opts, &out, "choose", _a, _seed, _count, _index)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Choose is a free data retrieval call binding the contract method 0xe19a52be.
//
// Solidity: function choose(address _a, bytes32 _seed, uint64 _count, uint64 _index) pure returns(uint64)
func (_Round *RoundSession) Choose(_a common.Address, _seed [32]byte, _count uint64, _index uint64) (uint64, error) {
	return _Round.Contract.Choose(&_Round.CallOpts, _a, _seed, _count, _index)
}

// Choose is a free data retrieval call binding the contract method 0xe19a52be.
//
// Solidity: function choose(address _a, bytes32 _seed, uint64 _count, uint64 _index) pure returns(uint64)
func (_Round *RoundCallerSession) Choose(_a common.Address, _seed [32]byte, _count uint64, _index uint64) (uint64, error) {
	return _Round.Contract.Choose(&_Round.CallOpts, _a, _seed, _count, _index)
}

// GetOrder is a free data retrieval call binding the contract method 0xcdf9d07c.
//
// Solidity: function getOrder(uint64 _cnt) pure returns(uint64 _order)
func (_Round *RoundCaller) GetOrder(opts *bind.CallOpts, _cnt uint64) (uint64, error) {
	var out []interface{}
	err := _Round.contract.Call(opts, &out, "getOrder", _cnt)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetOrder is a free data retrieval call binding the contract method 0xcdf9d07c.
//
// Solidity: function getOrder(uint64 _cnt) pure returns(uint64 _order)
func (_Round *RoundSession) GetOrder(_cnt uint64) (uint64, error) {
	return _Round.Contract.GetOrder(&_Round.CallOpts, _cnt)
}

// GetOrder is a free data retrieval call binding the contract method 0xcdf9d07c.
//
// Solidity: function getOrder(uint64 _cnt) pure returns(uint64 _order)
func (_Round *RoundCallerSession) GetOrder(_cnt uint64) (uint64, error) {
	return _Round.Contract.GetOrder(&_Round.CallOpts, _cnt)
}

// GetRound is a free data retrieval call binding the contract method 0x73582bc6.
//
// Solidity: function getRound(address _a, uint64 _e) view returns((uint256,uint256,uint64,uint64,bytes,(uint64,bytes[])[]))
func (_Round *RoundCaller) GetRound(opts *bind.CallOpts, _a common.Address, _e uint64) (IRoundChal, error) {
	var out []interface{}
	err := _Round.contract.Call(opts, &out, "getRound", _a, _e)

	if err != nil {
		return *new(IRoundChal), err
	}

	out0 := *abi.ConvertType(out[0], new(IRoundChal)).(*IRoundChal)

	return out0, err

}

// GetRound is a free data retrieval call binding the contract method 0x73582bc6.
//
// Solidity: function getRound(address _a, uint64 _e) view returns((uint256,uint256,uint64,uint64,bytes,(uint64,bytes[])[]))
func (_Round *RoundSession) GetRound(_a common.Address, _e uint64) (IRoundChal, error) {
	return _Round.Contract.GetRound(&_Round.CallOpts, _a, _e)
}

// GetRound is a free data retrieval call binding the contract method 0x73582bc6.
//
// Solidity: function getRound(address _a, uint64 _e) view returns((uint256,uint256,uint64,uint64,bytes,(uint64,bytes[])[]))
func (_Round *RoundCallerSession) GetRound(_a common.Address, _e uint64) (IRoundChal, error) {
	return _Round.Contract.GetRound(&_Round.CallOpts, _a, _e)
}

// SlotsInChal is a free data retrieval call binding the contract method 0xd48e0ba4.
//
// Solidity: function slotsInChal() view returns(uint64)
func (_Round *RoundCaller) SlotsInChal(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Round.contract.Call(opts, &out, "slotsInChal")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// SlotsInChal is a free data retrieval call binding the contract method 0xd48e0ba4.
//
// Solidity: function slotsInChal() view returns(uint64)
func (_Round *RoundSession) SlotsInChal() (uint64, error) {
	return _Round.Contract.SlotsInChal(&_Round.CallOpts)
}

// SlotsInChal is a free data retrieval call binding the contract method 0xd48e0ba4.
//
// Solidity: function slotsInChal() view returns(uint64)
func (_Round *RoundCallerSession) SlotsInChal() (uint64, error) {
	return _Round.Contract.SlotsInChal(&_Round.CallOpts)
}

// ChalCom is a paid mutator transaction binding the contract method 0x457964b1.
//
// Solidity: function chalCom(address _a, uint64 _ep, uint64 _qIndex) returns()
func (_Round *RoundTransactor) ChalCom(opts *bind.TransactOpts, _a common.Address, _ep uint64, _qIndex uint64) (*types.Transaction, error) {
	return _Round.contract.Transact(opts, "chalCom", _a, _ep, _qIndex)
}

// ChalCom is a paid mutator transaction binding the contract method 0x457964b1.
//
// Solidity: function chalCom(address _a, uint64 _ep, uint64 _qIndex) returns()
func (_Round *RoundSession) ChalCom(_a common.Address, _ep uint64, _qIndex uint64) (*types.Transaction, error) {
	return _Round.Contract.ChalCom(&_Round.TransactOpts, _a, _ep, _qIndex)
}

// ChalCom is a paid mutator transaction binding the contract method 0x457964b1.
//
// Solidity: function chalCom(address _a, uint64 _ep, uint64 _qIndex) returns()
func (_Round *RoundTransactorSession) ChalCom(_a common.Address, _ep uint64, _qIndex uint64) (*types.Transaction, error) {
	return _Round.Contract.ChalCom(&_Round.TransactOpts, _a, _ep, _qIndex)
}

// Challenge is a paid mutator transaction binding the contract method 0x098302e2.
//
// Solidity: function challenge(address _a, uint64 _ep, uint64 _count, bytes _com) returns()
func (_Round *RoundTransactor) Challenge(opts *bind.TransactOpts, _a common.Address, _ep uint64, _count uint64, _com []byte) (*types.Transaction, error) {
	return _Round.contract.Transact(opts, "challenge", _a, _ep, _count, _com)
}

// Challenge is a paid mutator transaction binding the contract method 0x098302e2.
//
// Solidity: function challenge(address _a, uint64 _ep, uint64 _count, bytes _com) returns()
func (_Round *RoundSession) Challenge(_a common.Address, _ep uint64, _count uint64, _com []byte) (*types.Transaction, error) {
	return _Round.Contract.Challenge(&_Round.TransactOpts, _a, _ep, _count, _com)
}

// Challenge is a paid mutator transaction binding the contract method 0x098302e2.
//
// Solidity: function challenge(address _a, uint64 _ep, uint64 _count, bytes _com) returns()
func (_Round *RoundTransactorSession) Challenge(_a common.Address, _ep uint64, _count uint64, _com []byte) (*types.Transaction, error) {
	return _Round.Contract.Challenge(&_Round.TransactOpts, _a, _ep, _count, _com)
}

// CheckOne is a paid mutator transaction binding the contract method 0x96d5f5cb.
//
// Solidity: function checkOne(address _a, uint64 _ep, uint64 _qIndex) returns(bool)
func (_Round *RoundTransactor) CheckOne(opts *bind.TransactOpts, _a common.Address, _ep uint64, _qIndex uint64) (*types.Transaction, error) {
	return _Round.contract.Transact(opts, "checkOne", _a, _ep, _qIndex)
}

// CheckOne is a paid mutator transaction binding the contract method 0x96d5f5cb.
//
// Solidity: function checkOne(address _a, uint64 _ep, uint64 _qIndex) returns(bool)
func (_Round *RoundSession) CheckOne(_a common.Address, _ep uint64, _qIndex uint64) (*types.Transaction, error) {
	return _Round.Contract.CheckOne(&_Round.TransactOpts, _a, _ep, _qIndex)
}

// CheckOne is a paid mutator transaction binding the contract method 0x96d5f5cb.
//
// Solidity: function checkOne(address _a, uint64 _ep, uint64 _qIndex) returns(bool)
func (_Round *RoundTransactorSession) CheckOne(_a common.Address, _ep uint64, _qIndex uint64) (*types.Transaction, error) {
	return _Round.Contract.CheckOne(&_Round.TransactOpts, _a, _ep, _qIndex)
}

// CheckSum is a paid mutator transaction binding the contract method 0xad306922.
//
// Solidity: function checkSum(address _a, uint64 _ep) returns(bool)
func (_Round *RoundTransactor) CheckSum(opts *bind.TransactOpts, _a common.Address, _ep uint64) (*types.Transaction, error) {
	return _Round.contract.Transact(opts, "checkSum", _a, _ep)
}

// CheckSum is a paid mutator transaction binding the contract method 0xad306922.
//
// Solidity: function checkSum(address _a, uint64 _ep) returns(bool)
func (_Round *RoundSession) CheckSum(_a common.Address, _ep uint64) (*types.Transaction, error) {
	return _Round.Contract.CheckSum(&_Round.TransactOpts, _a, _ep)
}

// CheckSum is a paid mutator transaction binding the contract method 0xad306922.
//
// Solidity: function checkSum(address _a, uint64 _ep) returns(bool)
func (_Round *RoundTransactorSession) CheckSum(_a common.Address, _ep uint64) (*types.Transaction, error) {
	return _Round.Contract.CheckSum(&_Round.TransactOpts, _a, _ep)
}

// ProveCom is a paid mutator transaction binding the contract method 0x0b17c321.
//
// Solidity: function proveCom(address _a, uint64 _ep, bytes[] _com) returns()
func (_Round *RoundTransactor) ProveCom(opts *bind.TransactOpts, _a common.Address, _ep uint64, _com [][]byte) (*types.Transaction, error) {
	return _Round.contract.Transact(opts, "proveCom", _a, _ep, _com)
}

// ProveCom is a paid mutator transaction binding the contract method 0x0b17c321.
//
// Solidity: function proveCom(address _a, uint64 _ep, bytes[] _com) returns()
func (_Round *RoundSession) ProveCom(_a common.Address, _ep uint64, _com [][]byte) (*types.Transaction, error) {
	return _Round.Contract.ProveCom(&_Round.TransactOpts, _a, _ep, _com)
}

// ProveCom is a paid mutator transaction binding the contract method 0x0b17c321.
//
// Solidity: function proveCom(address _a, uint64 _ep, bytes[] _com) returns()
func (_Round *RoundTransactorSession) ProveCom(_a common.Address, _ep uint64, _com [][]byte) (*types.Transaction, error) {
	return _Round.Contract.ProveCom(&_Round.TransactOpts, _a, _ep, _com)
}
