// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package proof

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IProofEProof is an auto generated low-level Go binding around an user-defined struct.
type IProofEProof struct {
	Fake    bool
	Submit  bool
	InRound bool
	Fine    *big.Int
	Chaler  common.Address
	Pf      IProofKZGProof
}

// IProofKZGProof is an auto generated low-level Go binding around an user-defined struct.
type IProofKZGProof struct {
	Commit []byte
	Psi    []byte
	Y      [32]byte
}

// ProofMetaData contains all meta data concerning the Proof contract.
var ProofMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_qIndex\",\"type\":\"uint64\"}],\"name\":\"chalCom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"checkKZG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_qIndex\",\"type\":\"uint64\"}],\"name\":\"checkOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"checkSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_e\",\"type\":\"uint64\"}],\"name\":\"getEProof\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"fake\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"submit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inRound\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fine\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chaler\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"commit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"psi\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"internalType\":\"structIProof.KZGProof\",\"name\":\"pf\",\"type\":\"tuple\"}],\"internalType\":\"structIProof.EProof\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kzgvk\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPenalty\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_com\",\"type\":\"bytes[]\"}],\"name\":\"proveCom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vk\",\"type\":\"bytes\"}],\"name\":\"setVK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"commit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"psi\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"internalType\":\"structIProof.KZGProof\",\"name\":\"_kp\",\"type\":\"tuple\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ep\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052601b600360086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200003b57600080fd5b5060405162004335380380620043358339818101604052810190620000619190620001ff565b6200008162000075620000c960201b60201c565b620000d160201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000231565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001c7826200019a565b9050919050565b620001d981620001ba565b8114620001e557600080fd5b50565b600081519050620001f981620001ce565b92915050565b60006020828403121562000218576200021762000195565b5b60006200022884828501620001e8565b91505092915050565b6140f480620002416000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80639fa6a6e3116100a2578063b9a272fe11610071578063b9a272fe1461026c578063d0b9178b14610288578063d6dad060146102a4578063d91de192146102c0578063f2fde38b146102dc5761010b565b80639fa6a6e3146101fa5780639fff505514610218578063a13e8e9114610234578063a8497f01146102505761010b565b806372fb9703116100de57806372fb97031461018457806376cdb03b146101a05780638da5cb5b146101be57806394933587146101dc5761010b565b80630eba984914610110578063266d12cb1461012e57806336982daa1461015e578063715018a61461017a575b600080fd5b6101186102f8565b6040516101259190612a12565b60405180910390f35b61014860048036038101906101439190612acb565b610312565b6040516101559190612cd7565b60405180910390f35b61017860048036038101906101739190612cf9565b610760565b005b610182610954565b005b61019e60048036038101906101999190612cf9565b610968565b005b6101a8611073565b6040516101b59190612d35565b60405180910390f35b6101c6611099565b6040516101d39190612d35565b60405180910390f35b6101e46110c2565b6040516101f19190612d9a565b60405180910390f35b610202611150565b60405161020f9190612a12565b60405180910390f35b610232600480360381019061022d9190612fd7565b61116a565b005b61024e600480360381019061024991906130f2565b611285565b005b61026a60048036038101906102659190612cf9565b61148e565b005b61028660048036038101906102819190612acb565b6119e3565b005b6102a2600480360381019061029d919061313b565b611bda565b005b6102be60048036038101906102b99190612acb565b611bf5565b005b6102da60048036038101906102d59190612acb565b611e61565b005b6102f660048036038101906102f19190612cf9565b612072565b005b600360089054906101000a900467ffffffffffffffff1681565b61031a612973565b610322612973565b6040518060c00160405280600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615158152602001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615158152602001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff1615158152602001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101548152602001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600301604051806060016040529081600082018054610633906131b3565b80601f016020809104026020016040519081016040528092919081815260200182805461065f906131b3565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b505050505081526020016001820180546106c5906131b3565b80601f01602080910402602001604051908101604052809291908181526020018280546106f1906131b3565b801561073e5780601f106107135761010080835404028352916020019161073e565b820191906000526020600020905b81548152906001019060200180831161072157829003601f168201915b5050505050815260200160028201548152505081525090508091505092915050565b600061076b826120f5565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b81526004016107c890613241565b6020604051808303816000875af11580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190613276565b73ffffffffffffffffffffffffffffffffffffffff1663ad30692284846040518363ffffffff1660e01b81526004016108459291906132a3565b6020604051808303816000875af1158015610864573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088891906132f8565b90508061094f5761094e600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846002600360089054906101000a900467ffffffffffffffff1661093f9190613354565b67ffffffffffffffff16612298565b5b505050565b61095c61268d565b610966600061270b565b565b6109706127cf565b60006002600360009054906101000a900467ffffffffffffffff166109959190613391565b9050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4390613419565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af790613485565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff1615610bb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bac906134f1565b60405180910390fd5b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401610c119061355d565b6020604051808303816000875af1158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190613276565b73ffffffffffffffffffffffffffffffffffffffff16636150ad8185856040518363ffffffff1660e01b8152600401610c8e9291906132a3565b60408051808303816000875af1158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd09190613592565b9150915060008167ffffffffffffffff1611610d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d189061361e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e888891533600a600360089054906101000a900467ffffffffffffffff16610d839190613354565b6040518363ffffffff1660e01b8152600401610da0929190613679565b600060405180830381600087803b158015610dba57600080fd5b505af1158015610dce573d6000803e3d6000fd5b505050506001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160026101000a81548160ff02191690831515021790555033600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401610f5190613241565b6020604051808303816000875af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190613276565b73ffffffffffffffffffffffffffffffffffffffff1663098302e2858585600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008967ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206003016000016040518563ffffffff1660e01b815260040161103b949392919061373b565b600060405180830381600087803b15801561105557600080fd5b505af1158015611069573d6000803e3d6000fd5b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600280546110cf906131b3565b80601f01602080910402602001604051908101604052809291908181526020018280546110fb906131b3565b80156111485780601f1061111d57610100808354040283529160200191611148565b820191906000526020600020905b81548152906001019060200180831161112b57829003601f168201915b505050505081565b600360009054906101000a900467ffffffffffffffff1681565b6000611175336120f5565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b81526004016111d090613241565b6020604051808303816000875af11580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112139190613276565b73ffffffffffffffffffffffffffffffffffffffff16630b17c3213383856040518463ffffffff1660e01b815260040161124f93929190613849565b600060405180830381600087803b15801561126957600080fd5b505af115801561127d573d6000803e3d6000fd5b505050505050565b61128d6127cf565b60006001600360009054906101000a900467ffffffffffffffff166112b29190613391565b9050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615611369576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611360906138d3565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060030160008201518160000190816113e69190613a80565b5060208201518160010190816113fc9190613a80565b50604082015181600201559050506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055505050565b6114966127cf565b60006001600360009054906101000a900467ffffffffffffffff166114bb9190613391565b9050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156990613419565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1661161857611617338383600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff16612298565b5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b815260040161167390613b9e565b6020604051808303816000875af1158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190613276565b73ffffffffffffffffffffffffffffffffffffffff166312a02c826001846116de9190613bbe565b6040518263ffffffff1660e01b81526004016116fa9190612a12565b60408051808303816000875af1158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190613c3b565b9150506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b815260040161179a90613cc7565b6020604051808303816000875af11580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190613276565b73ffffffffffffffffffffffffffffffffffffffff1663d30aa507600284600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600301600001600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008967ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600301600101600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a67ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600301600201546040518663ffffffff1660e01b815260040161195a959493929190613cf6565b6020604051808303816000875af1158015611979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199d91906132f8565b9050806119dd576119dc3385856004600360089054906101000a900467ffffffffffffffff166119cd9190613354565b67ffffffffffffffff16612298565b5b50505050565b60006119ee836120f5565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401611a4b90613241565b6020604051808303816000875af1158015611a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8e9190613276565b73ffffffffffffffffffffffffffffffffffffffff166396d5f5cb8584866040518463ffffffff1660e01b8152600401611aca93929190613d5e565b6020604051808303816000875af1158015611ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0d91906132f8565b905080611bd457611bd3600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685846002600360089054906101000a900467ffffffffffffffff16611bc49190613354565b67ffffffffffffffff16612298565b5b50505050565b611be261268d565b8060029081611bf19190613a80565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401611c4e90613de1565b6020604051808303816000875af1158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190613276565b73ffffffffffffffffffffffffffffffffffffffff166306f0b4f1836001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008767ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101546040518563ffffffff1660e01b8152600401611dbe9493929190613e58565b600060405180830381600087803b158015611dd857600080fd5b505af1158015611dec573d6000803e3d6000fd5b505050506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600101819055505050565b6000611e6c836120f5565b9050600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5a90613ee9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b8152600401611fbc90613241565b6020604051808303816000875af1158015611fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fff9190613276565b73ffffffffffffffffffffffffffffffffffffffff1663457964b18483856040518463ffffffff1660e01b815260040161203b93929190613d5e565b600060405180830381600087803b15801561205557600080fd5b505af1158015612069573d6000803e3d6000fd5b50505050505050565b61207a61268d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e090613f7b565b60405180910390fd5b6120f28161270b565b50565b60006120ff6127cf565b60006002600360009054906101000a900467ffffffffffffffff166121249190613391565b9050600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156121db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d290613419565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160029054906101000a900460ff1661228f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612286906134f1565b60405180910390fd5b80915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b81526004016122f390613de1565b6020604051808303816000875af1158015612312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123369190613276565b905060008173ffffffffffffffffffffffffffffffffffffffff16634339ceca8660016040518363ffffffff1660e01b8152600401612376929190613f9b565b602060405180830381865afa158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b79190613fc4565b9050828110156124e25780836123cd9190613ff1565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206001018190555080925085600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8173ffffffffffffffffffffffffffffffffffffffff166306f0b4f186600189876040518563ffffffff1660e01b81526004016125229493929190613e58565b600060405180830381600087803b15801561253c57600080fd5b505af1158015612550573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376890c5887600a600360089054906101000a900467ffffffffffffffff166125b69190613354565b6040518363ffffffff1660e01b81526004016125d3929190613679565b600060405180830381600087803b1580156125ed57600080fd5b505af1158015612601573d6000803e3d6000fd5b505050506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550505050505050565b61269561296b565b73ffffffffffffffffffffffffffffffffffffffff166126b3611099565b73ffffffffffffffffffffffffffffffffffffffff1614612709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270090614071565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040518163ffffffff1660e01b815260040161282a90613b9e565b6020604051808303816000875af1158015612849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286d9190613276565b90508073ffffffffffffffffffffffffffffffffffffffff1663919840ad6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156128b757600080fd5b505af11580156128cb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639fa6a6e36040518163ffffffff1660e01b81526004016020604051808303816000875af115801561291c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129409190614091565b600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b600033905090565b6040518060c0016040528060001515815260200160001515815260200160001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016129c56129cb565b81525090565b60405180606001604052806060815260200160608152602001600080191681525090565b600067ffffffffffffffff82169050919050565b612a0c816129ef565b82525050565b6000602082019050612a276000830184612a03565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a6c82612a41565b9050919050565b612a7c81612a61565b8114612a8757600080fd5b50565b600081359050612a9981612a73565b92915050565b612aa8816129ef565b8114612ab357600080fd5b50565b600081359050612ac581612a9f565b92915050565b60008060408385031215612ae257612ae1612a37565b5b6000612af085828601612a8a565b9250506020612b0185828601612ab6565b9150509250929050565b60008115159050919050565b612b2081612b0b565b82525050565b6000819050919050565b612b3981612b26565b82525050565b612b4881612a61565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b88578082015181840152602081019050612b6d565b60008484015250505050565b6000601f19601f8301169050919050565b6000612bb082612b4e565b612bba8185612b59565b9350612bca818560208601612b6a565b612bd381612b94565b840191505092915050565b6000819050919050565b612bf181612bde565b82525050565b60006060830160008301518482036000860152612c148282612ba5565b91505060208301518482036020860152612c2e8282612ba5565b9150506040830151612c436040860182612be8565b508091505092915050565b600060c083016000830151612c666000860182612b17565b506020830151612c796020860182612b17565b506040830151612c8c6040860182612b17565b506060830151612c9f6060860182612b30565b506080830151612cb26080860182612b3f565b5060a083015184820360a0860152612cca8282612bf7565b9150508091505092915050565b60006020820190508181036000830152612cf18184612c4e565b905092915050565b600060208284031215612d0f57612d0e612a37565b5b6000612d1d84828501612a8a565b91505092915050565b612d2f81612a61565b82525050565b6000602082019050612d4a6000830184612d26565b92915050565b600082825260208201905092915050565b6000612d6c82612b4e565b612d768185612d50565b9350612d86818560208601612b6a565b612d8f81612b94565b840191505092915050565b60006020820190508181036000830152612db48184612d61565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612df982612b94565b810181811067ffffffffffffffff82111715612e1857612e17612dc1565b5b80604052505050565b6000612e2b612a2d565b9050612e378282612df0565b919050565b600067ffffffffffffffff821115612e5757612e56612dc1565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115612e8d57612e8c612dc1565b5b612e9682612b94565b9050602081019050919050565b82818337600083830152505050565b6000612ec5612ec084612e72565b612e21565b905082815260208101848484011115612ee157612ee0612e6d565b5b612eec848285612ea3565b509392505050565b600082601f830112612f0957612f08612dbc565b5b8135612f19848260208601612eb2565b91505092915050565b6000612f35612f3084612e3c565b612e21565b90508083825260208201905060208402830185811115612f5857612f57612e68565b5b835b81811015612f9f57803567ffffffffffffffff811115612f7d57612f7c612dbc565b5b808601612f8a8982612ef4565b85526020850194505050602081019050612f5a565b5050509392505050565b600082601f830112612fbe57612fbd612dbc565b5b8135612fce848260208601612f22565b91505092915050565b600060208284031215612fed57612fec612a37565b5b600082013567ffffffffffffffff81111561300b5761300a612a3c565b5b61301784828501612fa9565b91505092915050565b600080fd5b600080fd5b61303381612bde565b811461303e57600080fd5b50565b6000813590506130508161302a565b92915050565b60006060828403121561306c5761306b613020565b5b6130766060612e21565b9050600082013567ffffffffffffffff81111561309657613095613025565b5b6130a284828501612ef4565b600083015250602082013567ffffffffffffffff8111156130c6576130c5613025565b5b6130d284828501612ef4565b60208301525060406130e684828501613041565b60408301525092915050565b60006020828403121561310857613107612a37565b5b600082013567ffffffffffffffff81111561312657613125612a3c565b5b61313284828501613056565b91505092915050565b60006020828403121561315157613150612a37565b5b600082013567ffffffffffffffff81111561316f5761316e612a3c565b5b61317b84828501612ef4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806131cb57607f821691505b6020821081036131de576131dd613184565b5b50919050565b600082825260208201905092915050565b7f726f756e64000000000000000000000000000000000000000000000000000000600082015250565b600061322b6005836131e4565b9150613236826131f5565b602082019050919050565b6000602082019050818103600083015261325a8161321e565b9050919050565b60008151905061327081612a73565b92915050565b60006020828403121561328c5761328b612a37565b5b600061329a84828501613261565b91505092915050565b60006040820190506132b86000830185612d26565b6132c56020830184612a03565b9392505050565b6132d581612b0b565b81146132e057600080fd5b50565b6000815190506132f2816132cc565b92915050565b60006020828403121561330e5761330d612a37565b5b600061331c848285016132e3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061335f826129ef565b915061336a836129ef565b9250828202613378816129ef565b915080821461338a57613389613325565b5b5092915050565b600061339c826129ef565b91506133a7836129ef565b9250828203905067ffffffffffffffff8111156133c7576133c6613325565b5b92915050565b7f616c7265616479206661696c0000000000000000000000000000000000000000600082015250565b6000613403600c836131e4565b915061340e826133cd565b602082019050919050565b60006020820190508181036000830152613432816133f6565b9050919050565b7f6e6f207375626d69740000000000000000000000000000000000000000000000600082015250565b600061346f6009836131e4565b915061347a82613439565b602082019050919050565b6000602082019050818103600083015261349e81613462565b9050919050565b7f696e76616c696420737461746500000000000000000000000000000000000000600082015250565b60006134db600d836131e4565b91506134e6826134a5565b602082019050919050565b6000602082019050818103600083015261350a816134ce565b9050919050565b7f66696c6500000000000000000000000000000000000000000000000000000000600082015250565b60006135476004836131e4565b915061355282613511565b602082019050919050565b600060208201905081810360008301526135768161353a565b9050919050565b60008151905061358c81612a9f565b92915050565b600080604083850312156135a9576135a8612a37565b5b60006135b78582860161357d565b92505060206135c88582860161357d565b9150509250929050565b7f6e6f206163746976650000000000000000000000000000000000000000000000600082015250565b60006136086009836131e4565b9150613613826135d2565b602082019050919050565b60006020820190508181036000830152613637816135fb565b9050919050565b6000819050919050565b600061366361365e613659846129ef565b61363e565b612b26565b9050919050565b61367381613648565b82525050565b600060408201905061368e6000830185612d26565b61369b602083018461366a565b9392505050565b60008190508160005260206000209050919050565b600081546136c4816131b3565b6136ce8186612d50565b945060018216600081146136e957600181146136ff57613732565b60ff198316865281151560200286019350613732565b613708856136a2565b60005b8381101561372a5781548189015260018201915060208101905061370b565b808801955050505b50505092915050565b60006080820190506137506000830187612d26565b61375d6020830186612a03565b61376a6040830185612a03565b818103606083015261377c81846136b7565b905095945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006137bf8383612ba5565b905092915050565b6000602082019050919050565b60006137df82613787565b6137e98185613792565b9350836020820285016137fb856137a3565b8060005b85811015613837578484038952815161381885826137b3565b9450613823836137c7565b925060208a019950506001810190506137ff565b50829750879550505050505092915050565b600060608201905061385e6000830186612d26565b61386b6020830185612a03565b818103604083015261387d81846137d4565b9050949350505050565b7f70726f6f66206578697374000000000000000000000000000000000000000000600082015250565b60006138bd600b836131e4565b91506138c882613887565b602082019050919050565b600060208201905081810360008301526138ec816138b0565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613903565b61394a8683613903565b95508019841693508086168417925050509392505050565b600061397d61397861397384612b26565b61363e565b612b26565b9050919050565b6000819050919050565b61399783613962565b6139ab6139a382613984565b848454613910565b825550505050565b600090565b6139c06139b3565b6139cb81848461398e565b505050565b5b818110156139ef576139e46000826139b8565b6001810190506139d1565b5050565b601f821115613a3457613a05816136a2565b613a0e846138f3565b81016020851015613a1d578190505b613a31613a29856138f3565b8301826139d0565b50505b505050565b600082821c905092915050565b6000613a5760001984600802613a39565b1980831691505092915050565b6000613a708383613a46565b9150826002028217905092915050565b613a8982612b4e565b67ffffffffffffffff811115613aa257613aa1612dc1565b5b613aac82546131b3565b613ab78282856139f3565b600060209050601f831160018114613aea5760008415613ad8578287015190505b613ae28582613a64565b865550613b4a565b601f198416613af8866136a2565b60005b82811015613b2057848901518255600182019150602085019450602081019050613afb565b86831015613b3d5784890151613b39601f891682613a46565b8355505b6001600288020188555050505b505050505050565b7f65706f6368000000000000000000000000000000000000000000000000000000600082015250565b6000613b886005836131e4565b9150613b9382613b52565b602082019050919050565b60006020820190508181036000830152613bb781613b7b565b9050919050565b6000613bc9826129ef565b9150613bd4836129ef565b9250828201905067ffffffffffffffff811115613bf457613bf3613325565b5b92915050565b613c0381612b26565b8114613c0e57600080fd5b50565b600081519050613c2081613bfa565b92915050565b600081519050613c358161302a565b92915050565b60008060408385031215613c5257613c51612a37565b5b6000613c6085828601613c11565b9250506020613c7185828601613c26565b9150509250929050565b7f626c730000000000000000000000000000000000000000000000000000000000600082015250565b6000613cb16003836131e4565b9150613cbc82613c7b565b602082019050919050565b60006020820190508181036000830152613ce081613ca4565b9050919050565b613cf081612bde565b82525050565b600060a0820190508181036000830152613d1081886136b7565b9050613d1f6020830187613ce7565b8181036040830152613d3181866136b7565b90508181036060830152613d4581856136b7565b9050613d546080830184613ce7565b9695505050505050565b6000606082019050613d736000830186612d26565b613d806020830185612a03565b613d8d6040830184612a03565b949350505050565b7f6e6f646500000000000000000000000000000000000000000000000000000000600082015250565b6000613dcb6004836131e4565b9150613dd682613d95565b602082019050919050565b60006020820190508181036000830152613dfa81613dbe565b9050919050565b6000819050919050565b600060ff82169050919050565b6000613e33613e2e613e2984613e01565b61363e565b613e0b565b9050919050565b613e4381613e18565b82525050565b613e5281612b26565b82525050565b6000608082019050613e6d6000830187612d26565b613e7a6020830186613e3a565b613e876040830185612d26565b613e946060830184613e49565b95945050505050565b7f696e76616c696420630000000000000000000000000000000000000000000000600082015250565b6000613ed36009836131e4565b9150613ede82613e9d565b602082019050919050565b60006020820190508181036000830152613f0281613ec6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613f656026836131e4565b9150613f7082613f09565b604082019050919050565b60006020820190508181036000830152613f9481613f58565b9050919050565b6000604082019050613fb06000830185612d26565b613fbd6020830184613e3a565b9392505050565b600060208284031215613fda57613fd9612a37565b5b6000613fe884828501613c11565b91505092915050565b6000613ffc82612b26565b915061400783612b26565b925082820390508181111561401f5761401e613325565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061405b6020836131e4565b915061406682614025565b602082019050919050565b6000602082019050818103600083015261408a8161404e565b9050919050565b6000602082840312156140a7576140a6612a37565b5b60006140b58482850161357d565b9150509291505056fea2646970667358221220ab0051a9cecc8209b2663d05d38d281832a8842d4dd2eead1ce533f8cba6a3ac64736f6c63430008180033",
}

// ProofABI is the input ABI used to generate the binding from.
// Deprecated: Use ProofMetaData.ABI instead.
var ProofABI = ProofMetaData.ABI

// ProofBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProofMetaData.Bin instead.
var ProofBin = ProofMetaData.Bin

// DeployProof deploys a new Ethereum contract, binding an instance of Proof to it.
func DeployProof(auth *bind.TransactOpts, backend bind.ContractBackend, _b common.Address) (common.Address, *types.Transaction, *Proof, error) {
	parsed, err := ProofMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProofBin), backend, _b)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Proof{ProofCaller: ProofCaller{contract: contract}, ProofTransactor: ProofTransactor{contract: contract}, ProofFilterer: ProofFilterer{contract: contract}}, nil
}

// Proof is an auto generated Go binding around an Ethereum contract.
type Proof struct {
	ProofCaller     // Read-only binding to the contract
	ProofTransactor // Write-only binding to the contract
	ProofFilterer   // Log filterer for contract events
}

// ProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProofSession struct {
	Contract     *Proof            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProofCallerSession struct {
	Contract *ProofCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProofTransactorSession struct {
	Contract     *ProofTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProofRaw struct {
	Contract *Proof // Generic contract binding to access the raw methods on
}

// ProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProofCallerRaw struct {
	Contract *ProofCaller // Generic read-only contract binding to access the raw methods on
}

// ProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProofTransactorRaw struct {
	Contract *ProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProof creates a new instance of Proof, bound to a specific deployed contract.
func NewProof(address common.Address, backend bind.ContractBackend) (*Proof, error) {
	contract, err := bindProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proof{ProofCaller: ProofCaller{contract: contract}, ProofTransactor: ProofTransactor{contract: contract}, ProofFilterer: ProofFilterer{contract: contract}}, nil
}

// NewProofCaller creates a new read-only instance of Proof, bound to a specific deployed contract.
func NewProofCaller(address common.Address, caller bind.ContractCaller) (*ProofCaller, error) {
	contract, err := bindProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProofCaller{contract: contract}, nil
}

// NewProofTransactor creates a new write-only instance of Proof, bound to a specific deployed contract.
func NewProofTransactor(address common.Address, transactor bind.ContractTransactor) (*ProofTransactor, error) {
	contract, err := bindProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProofTransactor{contract: contract}, nil
}

// NewProofFilterer creates a new log filterer instance of Proof, bound to a specific deployed contract.
func NewProofFilterer(address common.Address, filterer bind.ContractFilterer) (*ProofFilterer, error) {
	contract, err := bindProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProofFilterer{contract: contract}, nil
}

// bindProof binds a generic wrapper to an already deployed contract.
func bindProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ProofMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proof *ProofRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proof.Contract.ProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proof *ProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proof.Contract.ProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proof *ProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proof.Contract.ProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proof *ProofCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Proof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proof *ProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proof *ProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proof.Contract.contract.Transact(opts, method, params...)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Proof *ProofCaller) Bank(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proof.contract.Call(opts, &out, "bank")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Proof *ProofSession) Bank() (common.Address, error) {
	return _Proof.Contract.Bank(&_Proof.CallOpts)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Proof *ProofCallerSession) Bank() (common.Address, error) {
	return _Proof.Contract.Bank(&_Proof.CallOpts)
}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Proof *ProofCaller) Current(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proof.contract.Call(opts, &out, "current")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Proof *ProofSession) Current() (uint64, error) {
	return _Proof.Contract.Current(&_Proof.CallOpts)
}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Proof *ProofCallerSession) Current() (uint64, error) {
	return _Proof.Contract.Current(&_Proof.CallOpts)
}

// GetEProof is a free data retrieval call binding the contract method 0x266d12cb.
//
// Solidity: function getEProof(address _a, uint64 _e) view returns((bool,bool,bool,uint256,address,(bytes,bytes,bytes32)))
func (_Proof *ProofCaller) GetEProof(opts *bind.CallOpts, _a common.Address, _e uint64) (IProofEProof, error) {
	var out []interface{}
	err := _Proof.contract.Call(opts, &out, "getEProof", _a, _e)

	if err != nil {
		return *new(IProofEProof), err
	}

	out0 := *abi.ConvertType(out[0], new(IProofEProof)).(*IProofEProof)

	return out0, err

}

// GetEProof is a free data retrieval call binding the contract method 0x266d12cb.
//
// Solidity: function getEProof(address _a, uint64 _e) view returns((bool,bool,bool,uint256,address,(bytes,bytes,bytes32)))
func (_Proof *ProofSession) GetEProof(_a common.Address, _e uint64) (IProofEProof, error) {
	return _Proof.Contract.GetEProof(&_Proof.CallOpts, _a, _e)
}

// GetEProof is a free data retrieval call binding the contract method 0x266d12cb.
//
// Solidity: function getEProof(address _a, uint64 _e) view returns((bool,bool,bool,uint256,address,(bytes,bytes,bytes32)))
func (_Proof *ProofCallerSession) GetEProof(_a common.Address, _e uint64) (IProofEProof, error) {
	return _Proof.Contract.GetEProof(&_Proof.CallOpts, _a, _e)
}

// Kzgvk is a free data retrieval call binding the contract method 0x94933587.
//
// Solidity: function kzgvk() view returns(bytes)
func (_Proof *ProofCaller) Kzgvk(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _Proof.contract.Call(opts, &out, "kzgvk")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Kzgvk is a free data retrieval call binding the contract method 0x94933587.
//
// Solidity: function kzgvk() view returns(bytes)
func (_Proof *ProofSession) Kzgvk() ([]byte, error) {
	return _Proof.Contract.Kzgvk(&_Proof.CallOpts)
}

// Kzgvk is a free data retrieval call binding the contract method 0x94933587.
//
// Solidity: function kzgvk() view returns(bytes)
func (_Proof *ProofCallerSession) Kzgvk() ([]byte, error) {
	return _Proof.Contract.Kzgvk(&_Proof.CallOpts)
}

// MinPenalty is a free data retrieval call binding the contract method 0x0eba9849.
//
// Solidity: function minPenalty() view returns(uint64)
func (_Proof *ProofCaller) MinPenalty(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Proof.contract.Call(opts, &out, "minPenalty")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// MinPenalty is a free data retrieval call binding the contract method 0x0eba9849.
//
// Solidity: function minPenalty() view returns(uint64)
func (_Proof *ProofSession) MinPenalty() (uint64, error) {
	return _Proof.Contract.MinPenalty(&_Proof.CallOpts)
}

// MinPenalty is a free data retrieval call binding the contract method 0x0eba9849.
//
// Solidity: function minPenalty() view returns(uint64)
func (_Proof *ProofCallerSession) MinPenalty() (uint64, error) {
	return _Proof.Contract.MinPenalty(&_Proof.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proof *ProofCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Proof.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proof *ProofSession) Owner() (common.Address, error) {
	return _Proof.Contract.Owner(&_Proof.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Proof *ProofCallerSession) Owner() (common.Address, error) {
	return _Proof.Contract.Owner(&_Proof.CallOpts)
}

// ChalCom is a paid mutator transaction binding the contract method 0xd91de192.
//
// Solidity: function chalCom(address _a, uint64 _qIndex) returns()
func (_Proof *ProofTransactor) ChalCom(opts *bind.TransactOpts, _a common.Address, _qIndex uint64) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "chalCom", _a, _qIndex)
}

// ChalCom is a paid mutator transaction binding the contract method 0xd91de192.
//
// Solidity: function chalCom(address _a, uint64 _qIndex) returns()
func (_Proof *ProofSession) ChalCom(_a common.Address, _qIndex uint64) (*types.Transaction, error) {
	return _Proof.Contract.ChalCom(&_Proof.TransactOpts, _a, _qIndex)
}

// ChalCom is a paid mutator transaction binding the contract method 0xd91de192.
//
// Solidity: function chalCom(address _a, uint64 _qIndex) returns()
func (_Proof *ProofTransactorSession) ChalCom(_a common.Address, _qIndex uint64) (*types.Transaction, error) {
	return _Proof.Contract.ChalCom(&_Proof.TransactOpts, _a, _qIndex)
}

// Challenge is a paid mutator transaction binding the contract method 0x72fb9703.
//
// Solidity: function challenge(address _a) returns()
func (_Proof *ProofTransactor) Challenge(opts *bind.TransactOpts, _a common.Address) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "challenge", _a)
}

// Challenge is a paid mutator transaction binding the contract method 0x72fb9703.
//
// Solidity: function challenge(address _a) returns()
func (_Proof *ProofSession) Challenge(_a common.Address) (*types.Transaction, error) {
	return _Proof.Contract.Challenge(&_Proof.TransactOpts, _a)
}

// Challenge is a paid mutator transaction binding the contract method 0x72fb9703.
//
// Solidity: function challenge(address _a) returns()
func (_Proof *ProofTransactorSession) Challenge(_a common.Address) (*types.Transaction, error) {
	return _Proof.Contract.Challenge(&_Proof.TransactOpts, _a)
}

// CheckKZG is a paid mutator transaction binding the contract method 0xa8497f01.
//
// Solidity: function checkKZG(address _a) returns()
func (_Proof *ProofTransactor) CheckKZG(opts *bind.TransactOpts, _a common.Address) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "checkKZG", _a)
}

// CheckKZG is a paid mutator transaction binding the contract method 0xa8497f01.
//
// Solidity: function checkKZG(address _a) returns()
func (_Proof *ProofSession) CheckKZG(_a common.Address) (*types.Transaction, error) {
	return _Proof.Contract.CheckKZG(&_Proof.TransactOpts, _a)
}

// CheckKZG is a paid mutator transaction binding the contract method 0xa8497f01.
//
// Solidity: function checkKZG(address _a) returns()
func (_Proof *ProofTransactorSession) CheckKZG(_a common.Address) (*types.Transaction, error) {
	return _Proof.Contract.CheckKZG(&_Proof.TransactOpts, _a)
}

// CheckOne is a paid mutator transaction binding the contract method 0xb9a272fe.
//
// Solidity: function checkOne(address _a, uint64 _qIndex) returns()
func (_Proof *ProofTransactor) CheckOne(opts *bind.TransactOpts, _a common.Address, _qIndex uint64) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "checkOne", _a, _qIndex)
}

// CheckOne is a paid mutator transaction binding the contract method 0xb9a272fe.
//
// Solidity: function checkOne(address _a, uint64 _qIndex) returns()
func (_Proof *ProofSession) CheckOne(_a common.Address, _qIndex uint64) (*types.Transaction, error) {
	return _Proof.Contract.CheckOne(&_Proof.TransactOpts, _a, _qIndex)
}

// CheckOne is a paid mutator transaction binding the contract method 0xb9a272fe.
//
// Solidity: function checkOne(address _a, uint64 _qIndex) returns()
func (_Proof *ProofTransactorSession) CheckOne(_a common.Address, _qIndex uint64) (*types.Transaction, error) {
	return _Proof.Contract.CheckOne(&_Proof.TransactOpts, _a, _qIndex)
}

// CheckSum is a paid mutator transaction binding the contract method 0x36982daa.
//
// Solidity: function checkSum(address _a) returns()
func (_Proof *ProofTransactor) CheckSum(opts *bind.TransactOpts, _a common.Address) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "checkSum", _a)
}

// CheckSum is a paid mutator transaction binding the contract method 0x36982daa.
//
// Solidity: function checkSum(address _a) returns()
func (_Proof *ProofSession) CheckSum(_a common.Address) (*types.Transaction, error) {
	return _Proof.Contract.CheckSum(&_Proof.TransactOpts, _a)
}

// CheckSum is a paid mutator transaction binding the contract method 0x36982daa.
//
// Solidity: function checkSum(address _a) returns()
func (_Proof *ProofTransactorSession) CheckSum(_a common.Address) (*types.Transaction, error) {
	return _Proof.Contract.CheckSum(&_Proof.TransactOpts, _a)
}

// ProveCom is a paid mutator transaction binding the contract method 0x9fff5055.
//
// Solidity: function proveCom(bytes[] _com) returns()
func (_Proof *ProofTransactor) ProveCom(opts *bind.TransactOpts, _com [][]byte) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "proveCom", _com)
}

// ProveCom is a paid mutator transaction binding the contract method 0x9fff5055.
//
// Solidity: function proveCom(bytes[] _com) returns()
func (_Proof *ProofSession) ProveCom(_com [][]byte) (*types.Transaction, error) {
	return _Proof.Contract.ProveCom(&_Proof.TransactOpts, _com)
}

// ProveCom is a paid mutator transaction binding the contract method 0x9fff5055.
//
// Solidity: function proveCom(bytes[] _com) returns()
func (_Proof *ProofTransactorSession) ProveCom(_com [][]byte) (*types.Transaction, error) {
	return _Proof.Contract.ProveCom(&_Proof.TransactOpts, _com)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proof *ProofTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proof *ProofSession) RenounceOwnership() (*types.Transaction, error) {
	return _Proof.Contract.RenounceOwnership(&_Proof.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Proof *ProofTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Proof.Contract.RenounceOwnership(&_Proof.TransactOpts)
}

// SetVK is a paid mutator transaction binding the contract method 0xd0b9178b.
//
// Solidity: function setVK(bytes _vk) returns()
func (_Proof *ProofTransactor) SetVK(opts *bind.TransactOpts, _vk []byte) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "setVK", _vk)
}

// SetVK is a paid mutator transaction binding the contract method 0xd0b9178b.
//
// Solidity: function setVK(bytes _vk) returns()
func (_Proof *ProofSession) SetVK(_vk []byte) (*types.Transaction, error) {
	return _Proof.Contract.SetVK(&_Proof.TransactOpts, _vk)
}

// SetVK is a paid mutator transaction binding the contract method 0xd0b9178b.
//
// Solidity: function setVK(bytes _vk) returns()
func (_Proof *ProofTransactorSession) SetVK(_vk []byte) (*types.Transaction, error) {
	return _Proof.Contract.SetVK(&_Proof.TransactOpts, _vk)
}

// Submit is a paid mutator transaction binding the contract method 0xa13e8e91.
//
// Solidity: function submit((bytes,bytes,bytes32) _kp) returns()
func (_Proof *ProofTransactor) Submit(opts *bind.TransactOpts, _kp IProofKZGProof) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "submit", _kp)
}

// Submit is a paid mutator transaction binding the contract method 0xa13e8e91.
//
// Solidity: function submit((bytes,bytes,bytes32) _kp) returns()
func (_Proof *ProofSession) Submit(_kp IProofKZGProof) (*types.Transaction, error) {
	return _Proof.Contract.Submit(&_Proof.TransactOpts, _kp)
}

// Submit is a paid mutator transaction binding the contract method 0xa13e8e91.
//
// Solidity: function submit((bytes,bytes,bytes32) _kp) returns()
func (_Proof *ProofTransactorSession) Submit(_kp IProofKZGProof) (*types.Transaction, error) {
	return _Proof.Contract.Submit(&_Proof.TransactOpts, _kp)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proof *ProofTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proof *ProofSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proof.Contract.TransferOwnership(&_Proof.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Proof *ProofTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Proof.Contract.TransferOwnership(&_Proof.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd6dad060.
//
// Solidity: function withdraw(address _a, uint64 _ep) returns()
func (_Proof *ProofTransactor) Withdraw(opts *bind.TransactOpts, _a common.Address, _ep uint64) (*types.Transaction, error) {
	return _Proof.contract.Transact(opts, "withdraw", _a, _ep)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd6dad060.
//
// Solidity: function withdraw(address _a, uint64 _ep) returns()
func (_Proof *ProofSession) Withdraw(_a common.Address, _ep uint64) (*types.Transaction, error) {
	return _Proof.Contract.Withdraw(&_Proof.TransactOpts, _a, _ep)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd6dad060.
//
// Solidity: function withdraw(address _a, uint64 _ep) returns()
func (_Proof *ProofTransactorSession) Withdraw(_a common.Address, _ep uint64) (*types.Transaction, error) {
	return _Proof.Contract.Withdraw(&_Proof.TransactOpts, _a, _ep)
}

// ProofOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Proof contract.
type ProofOwnershipTransferredIterator struct {
	Event *ProofOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProofOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProofOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProofOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProofOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProofOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProofOwnershipTransferred represents a OwnershipTransferred event raised by the Proof contract.
type ProofOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proof *ProofFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProofOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proof.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProofOwnershipTransferredIterator{contract: _Proof.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proof *ProofFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProofOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Proof.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProofOwnershipTransferred)
				if err := _Proof.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Proof *ProofFilterer) ParseOwnershipTransferred(log types.Log) (*ProofOwnershipTransferred, error) {
	event := new(ProofOwnershipTransferred)
	if err := _Proof.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
