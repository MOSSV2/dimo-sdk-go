// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package space

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ISpaceInfo is an auto generated low-level Go binding around an user-defined struct.
type ISpaceInfo struct {
	Name   string
	Owner  common.Address
	Model  uint64
	Gpu    uint64
	Price  *big.Int
	Start  uint64
	Expire uint64
	Active bool
	Fin    bool
}

// ISpaceZKP is an auto generated low-level Go binding around an user-defined struct.
type ISpaceZKP struct {
	Fake   bool
	Root   []byte
	Proof  []byte
	Fine   *big.Int
	Chaler common.Address
}

// SpaceMetaData contains all meta data concerning the Space contract.
var SpaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_b\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_ai\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_an\",\"type\":\"string\"}],\"name\":\"AddGPU\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_si\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_rt\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_prf\",\"type\":\"bytes\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sn\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_mi\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_gi\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_p\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_e\",\"type\":\"uint64\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_si\",\"type\":\"uint64\"}],\"name\":\"checkC4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sn\",\"type\":\"string\"}],\"name\":\"getIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_si\",\"type\":\"uint64\"}],\"name\":\"getSpace\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"model\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gpu\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expire\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fin\",\"type\":\"bool\"}],\"internalType\":\"structISpace.Info\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_si\",\"type\":\"uint64\"}],\"name\":\"getZKP\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"fake\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"root\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fine\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chaler\",\"type\":\"address\"}],\"internalType\":\"structISpace.ZKP\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPenalty\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRent\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_si\",\"type\":\"uint64\"}],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_m\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523462000037576200001e6200001862000116565b620002b6565b620000286200003d565b61459d620002e2823961459d90f35b62000043565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90620000749062000048565b810190811060018060401b038211176200008d57604052565b62000052565b90620000aa620000a26200003d565b928362000068565b565b600080fd5b60018060a01b031690565b620000c790620000b1565b90565b620000d581620000bc565b03620000dd57565b600080fd5b90505190620000f182620000ca565b565b9060208282031262000110576200010d91600001620000e2565b90565b620000ac565b620001396200487f803803806200012d8162000093565b928339810190620000f3565b90565b60001b90565b906200015560018060401b03916200013c565b9181191691161790565b90565b60018060401b031690565b90565b62000189620001836200018f926200015f565b6200016d565b62000162565b90565b90565b90620001af620001a9620001b79262000170565b62000192565b825462000142565b9055565b60401b90565b90620001dd68010000000000000000600160801b0391620001bb565b9181191691161790565b90565b62000203620001fd6200020992620001e7565b6200016d565b62000162565b90565b9062000226620002206200022e92620001ea565b62000192565b8254620001c1565b9055565b906200024560018060a01b03916200013c565b9181191691161790565b62000268620002626200026e92620000b1565b6200016d565b620000b1565b90565b6200027c906200024f565b90565b6200028a9062000271565b90565b90565b90620002aa620002a4620002b2926200027f565b6200028d565b825462000232565b9055565b620002df90620002c9601e600162000195565b620002d7601b60016200020c565b600062000290565b56fe60806040526004361015610013575b610b2a565b61001e60003561010d565b80630eba9849146101085780631b1683f7146101035780631bd98c77146100fe578063228cb733146100f95780632e1a7d4d146100f4578063679dffb4146100ef57806370a08231146100ea57806376cdb03b146100e557806391fb07c4146100e057806399760d12146100db5780639fa6a6e3146100d6578063b8c4dfec146100d1578063cf936449146100cc578063e38c6116146100c75763ea1bbe350361000e57610af5565b610a8a565b610a45565b610952565b610837565b6107f0565b610666565b6104c3565b61042c565b61039d565b61036a565b6102f2565b610260565b61022d565b6101aa565b60e01c90565b60405190565b600080fd5b600080fd5b600091031261012e57565b61011e565b1c90565b67ffffffffffffffff1690565b6101549060086101599302610133565b610137565b90565b906101679154610144565b90565b610177600160089061015c565b90565b67ffffffffffffffff1690565b6101909061017a565b9052565b91906101a890600060208501940190610187565b565b346101da576101ba366004610123565b6101d66101c561016a565b6101cd610113565b91829182610194565b0390f35b610119565b600080fd5b6101ed8161017a565b036101f457565b600080fd5b90503590610206826101e4565b565b906020828203126102225761021f916000016101f9565b90565b61011e565b60000190565b3461025b57610245610240366004610208565b61124b565b61024d610113565b8061025781610227565b0390f35b610119565b3461028e57610278610273366004610208565b612016565b610280610113565b8061028a81610227565b0390f35b610119565b90565b6102a69060086102ab9302610133565b610293565b90565b906102b99154610296565b90565b6102c960026000906102ae565b90565b90565b6102d8906102cc565b9052565b91906102f0906000602085019401906102cf565b565b3461032257610302366004610123565b61031e61030d6102bc565b610315610113565b918291826102dc565b0390f35b610119565b610330816102cc565b0361033757565b600080fd5b9050359061034982610327565b565b90602082820312610365576103629160000161033c565b90565b61011e565b346103985761038261037d36600461034b565b6127a5565b61038a610113565b8061039481610227565b0390f35b610119565b346103cd576103ad366004610123565b6103c96103b86129ed565b6103c0610113565b918291826102dc565b0390f35b610119565b60018060a01b031690565b6103e6906103d2565b90565b6103f2816103dd565b036103f957565b600080fd5b9050359061040b826103e9565b565b9060208282031261042757610424916000016103fe565b90565b61011e565b3461045c5761045861044761044236600461040d565b612a0d565b61044f610113565b918291826102dc565b0390f35b610119565b60018060a01b031690565b61047c9060086104819302610133565b610461565b90565b9061048f915461046c565b90565b61049d600080610484565b90565b6104a9906103dd565b9052565b91906104c1906000602085019401906104a0565b565b346104f3576104d3366004610123565b6104ef6104de610492565b6104e6610113565b918291826104ad565b0390f35b610119565b5190565b60209181520190565b60005b838110610519575050906000910152565b806020918301518185015201610508565b601f801991011690565b61055361055c6020936105619361054a816104f8565b938480936104fc565b95869101610505565b61052a565b0190565b61056e906103dd565b9052565b61057b9061017a565b9052565b610588906102cc565b9052565b151590565b61059a9061058c565b9052565b9061064a90610100806105c1610120840160008701518582036000870152610534565b946105d460208201516020860190610565565b6105e660408201516040860190610572565b6105f860608201516060860190610572565b61060a6080820151608086019061057f565b61061c60a082015160a0860190610572565b61062e60c082015160c0860190610572565b61064060e082015160e0860190610591565b0151910190610591565b90565b610663916020820191600081840391015261059e565b90565b346106965761069261068161067c366004610208565b612bda565b610689610113565b9182918261064d565b0390f35b610119565b600080fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b906106c59061052a565b810190811067ffffffffffffffff8211176106df57604052565b6106a5565b906106f76106f0610113565b92836106bb565b565b67ffffffffffffffff81116107175761071360209161052a565b0190565b6106a5565b90826000939282370152565b9092919261073d610738826106f9565b6106e4565b93818552602085019082840111610759576107579261071c565b565b6106a0565b9080601f8301121561077c5781602061077993359101610728565b90565b61069b565b919060a0838203126107eb57600083013567ffffffffffffffff81116107e657816107ad91850161075e565b926107bb82602083016101f9565b926107e36107cc84604085016101f9565b936107da816060860161033c565b936080016101f9565b90565b6101df565b61011e565b346108225761080c610803366004610781565b93929092613434565b610814610113565b8061081e81610227565b0390f35b610119565b610834600060149061015c565b90565b3461086757610847366004610123565b610863610852610827565b61085a610113565b91829182610194565b0390f35b610119565b67ffffffffffffffff811161088a5761088660209161052a565b0190565b6106a5565b909291926108a461089f8261086c565b6106e4565b938185526020850190828401116108c0576108be9261071c565b565b6106a0565b9080601f830112156108e3578160206108e09335910161088f565b90565b61069b565b9160608383031261094d5761090082600085016101f9565b92602081013567ffffffffffffffff811161094857836109219183016108c5565b92604082013567ffffffffffffffff81116109435761094092016108c5565b90565b6101df565b6101df565b61011e565b346109815761096b6109653660046108e8565b91613cc2565b610973610113565b8061097d81610227565b0390f35b610119565b5190565b60209181520190565b6109b26109bb6020936109c0936109a981610986565b9384809361098a565b95869101610505565b61052a565b0190565b90610a2990608080610a0c6109fa60a085016109e860008901516000880190610591565b60208801518682036020880152610993565b60408701518582036040870152610993565b94610a1f6060820151606086019061057f565b0151910190610565565b90565b610a4291602082019160008184039101526109c4565b90565b34610a7557610a71610a60610a5b366004610208565b614033565b610a68610113565b91829182610a2c565b0390f35b610119565b610a87600160009061015c565b90565b34610aba57610a9a366004610123565b610ab6610aa5610a7a565b610aad610113565b91829182610194565b0390f35b610119565b90602082820312610af057600082013567ffffffffffffffff8111610aeb57610ae8920161075e565b90565b6101df565b61011e565b34610b2557610b21610b10610b0b366004610abf565b6140e7565b610b18610113565b91829182610194565b0390f35b610119565b600080fd5b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b610b5d81610b45565b821015610b7857610b6f600591610b49565b91020190600090565b610b2f565b60881c90565b60ff1690565b610b95610b9a91610b7d565b610b83565b90565b610ba79054610b89565b90565b60209181520190565b60007f66696e6973680000000000000000000000000000000000000000000000000000910152565b610be86006602092610baa565b610bf181610bb3565b0190565b610c0b9060208101906000818303910152610bdb565b90565b15610c1557565b610c1d610113565b62461bcd60e51b815280610c3360048201610bf5565b0390fd5b60401c90565b610c49610c4e91610c37565b610137565b90565b610c5b9054610c3d565b90565b60a01c90565b610c70610c7591610c5e565b610137565b90565b610c829054610c64565b90565b60001c90565b610c97610c9c91610c85565b610461565b90565b610ca99054610c8b565b90565b60007f696e76616c696400000000000000000000000000000000000000000000000000910152565b610ce16007602092610baa565b610cea81610cac565b0190565b610d049060208101906000818303910152610cd4565b90565b15610d0e57565b610d16610113565b62461bcd60e51b815280610d2c60048201610cee565b0390fd5b60801c90565b610d42610d4791610d30565b610b83565b90565b610d549054610d36565b90565b610d63610d6891610c85565b610137565b90565b610d759054610d57565b90565b90565b610d8f610d8a610d94926103d2565b610d78565b6103d2565b90565b610da090610d7b565b90565b610dac90610d97565b90565b610db890610d7b565b90565b610dc490610daf565b90565b600080fd5b60e01b90565b90505190610ddf826103e9565b565b90602082820312610dfb57610df891600001610dd2565b90565b61011e565b60007f6770750000000000000000000000000000000000000000000000000000000000910152565b610e356003602092610baa565b610e3e81610e00565b0190565b610e589060208101906000818303910152610e28565b90565b610e63610113565b3d6000823e3d90fd5b610e7590610d7b565b90565b610e8190610e6c565b90565b610e8d90610daf565b90565b634e487b7160e01b600052601160045260246000fd5b610eb2610eb89161017a565b9161017a565b90039067ffffffffffffffff8211610ecc57565b610e90565b610edd610ee291610c85565b610293565b90565b610eef9054610ed1565b90565b610f06610f01610f0b9261017a565b610d78565b6102cc565b90565b610f1d610f23919392936102cc565b926102cc565b91610f2f8382026102cc565b928184041490151715610f3e57565b610e90565b90565b610f5a610f55610f5f92610f43565b610d78565b6102cc565b90565b90565b610f79610f74610f7e92610f62565b610d78565b6102cc565b90565b90565b610f98610f93610f9d92610f81565b610d78565b6102cc565b90565b634e487b7160e01b600052601260045260246000fd5b610fc2610fc8916102cc565b916102cc565b908115610fd3570490565b610fa0565b610fe190610daf565b90565b90610fee90610fd8565b600052602052604060002090565b61100b611011919392936102cc565b926102cc565b820180921161101c57565b610e90565b60001b90565b9061103460001991611021565b9181191691161790565b61105261104d611057926102cc565b610d78565b6102cc565b90565b90565b9061107261106d6110799261103e565b61105a565b8254611027565b9055565b9061108790610fd8565b600052602052604060002090565b906110a160ff91611021565b9181191691161790565b6110b49061058c565b90565b90565b906110cf6110ca6110d6926110ab565b6110b7565b8254611095565b9055565b60009103126110e557565b61011e565b91602061110c92949361110560408201966000830190610187565b01906102cf565b565b60007f6d6f64656c000000000000000000000000000000000000000000000000000000910152565b6111436005602092610baa565b61114c8161110e565b0190565b6111669060208101906000818303910152611136565b90565b61117290610d7b565b90565b61117e90611169565b90565b61118a90610daf565b90565b9160206111af9294936111a8604082019660008301906104a0565b01906102cf565b565b60007f6261736500000000000000000000000000000000000000000000000000000000910152565b6111e66004602092610baa565b6111ef816111b1565b0190565b61120990602081019060008183039101526111d9565b90565b60881b90565b9061122160ff60881b9161120c565b9181191691161790565b9061124061123b611247926110ab565b6110b7565b8254611212565b9055565b611253614251565b61127c611277611271600461126a60038690610b54565b5001610b9d565b1561058c565b610c0e565b611294600461128d60038490610b54565b5001610c51565b61129e6000610c78565b6112b06112aa8361017a565b9161017a565b11156118d8575b6112cf60046112c860038590610b54565b5001610d4a565b6000146118b45761130b60206112f56112f06112eb6000610c9f565b610da3565b610dbb565b63693ec85e90611303610113565b938492610dcc565b82528160008161131d60048201610e42565b03925af180156118af5761133991600091611881575b50610e78565b9061138b602061134884610e84565b63d370a37d90611380600061136b600261136460038c90610b54565b5001610d6b565b93611374610113565b96879586948593610dcc565b835260048301610194565b03925af1801561187c576114699160009161184e575b50926114646113f06113cb856113c560046113be60038c90610b54565b5001610d6b565b90610ea6565b6113eb6113e560036113de818c90610b54565b5001610ee5565b91610ef2565b610f0e565b9461145261142e61141e61140e60026114098b91610f46565b610f0e565b6114186009610f65565b90610f0e565b611428600a610f84565b90610fb6565b61144c61143d60068590610fe4565b9161144783610ee5565b610ffc565b9061105d565b61145f600191600761107d565b6110ba565b610e84565b90633ad8fe1a611487600261148060038890610b54565b5001610d6b565b8493803b15611849576114ae600080946114b96114a2610113565b98899687958694610dcc565b8452600484016110ea565b03925af19182156118445761150092611817575b5060206114ea6114e56114e06000610c9f565b610da3565b610dbb565b63693ec85e906114f8610113565b948592610dcc565b82528160008161151260048201611150565b03925af19182156118125761153d61153861157e946020936000916117e5575b50611175565b611181565b63d370a37d9061157361155e600161155760038b90610b54565b5001610c78565b92611567610113565b96879485938493610dcc565b835260048301610194565b03915afa9182156117e05761162a936115e16115d26115ca6115ba611605976115e7966000916117b2575b50946115b56002610f46565b610f0e565b6115c4600a610f84565b90610fb6565b926006610fe4565b916115dc83610ee5565b610ffc565b9061105d565b5b61160060046115f960038790610b54565b5001610c51565b610ea6565b61162561161f6003611618818790610b54565b5001610ee5565b91610ef2565b610f0e565b9061164561164061163b6000610c9f565b610da3565b610dbb565b916376890c58611663600161165c60038690610b54565b5001610c9f565b8294803b156117ad5761168a6000809461169561167e610113565b998a9687958694610dcc565b84526004840161118d565b03925af19283156117a8576116df9361177b575b5060069060206116c96116c46116bf6000610c9f565b610da3565b610dbb565b63693ec85e906116d7610113565b968792610dcc565b8252816000816116f1600482016111f3565b03925af19182156117765761171961172e936117289261174497600092611746575b50610fe4565b9161172383610ee5565b610ffc565b9061105d565b600461173d6001926003610b54565b500161122b565b565b61176891925060203d811161176f575b61176081836106bb565b810190610de1565b9038611713565b503d611756565b610e5b565b61179b9060003d81116117a1575b61179381836106bb565b8101906110da565b386116a9565b503d611789565b610e5b565b610dc7565b6117d3915060203d81116117d9575b6117cb81836106bb565b810190610de1565b386115a9565b503d6117c1565b610e5b565b6118059150843d811161180b575b6117fd81836106bb565b810190610de1565b38611532565b503d6117f3565b610e5b565b6118379060003d811161183d575b61182f81836106bb565b8101906110da565b386114cd565b503d611825565b610e5b565b610dc7565b61186f915060203d8111611875575b61186781836106bb565b810190610de1565b386113a1565b503d61185d565b610e5b565b6118a2915060203d81116118a8575b61189a81836106bb565b810190610de1565b38611333565b503d611890565b610e5b565b5061162a6116056118d360046118cc60038690610b54565b5001610d6b565b6115e8565b5061190c6118f460016118ed60038590610b54565b5001610c9f565b611906611900336103dd565b916103dd565b14610d07565b6119166000610c78565b6112b7565b61192f61192a6119349261017a565b610d78565b61017a565b90565b906119419061191b565b600052602052604060002090565b61195b61196091610c85565b610b83565b90565b61196d905461194f565b90565b90565b61197c81611970565b0361198357565b600080fd5b9050519061199582611973565b565b909291926119ac6119a78261086c565b6106e4565b938185526020850190828401116119c8576119c692610505565b565b6106a0565b9080601f830112156119eb578160206119e893519101611997565b90565b61069b565b919091604081840312611a3157611a0a8360008301611988565b92602082015167ffffffffffffffff8111611a2c57611a2992016119cd565b90565b6101df565b61011e565b60007f7a6b700000000000000000000000000000000000000000000000000000000000910152565b611a6b6003602092610baa565b611a7481611a36565b0190565b611a8e9060208101906000818303910152611a5e565b90565b611a9a90610d7b565b90565b611aa690611a91565b90565b611ab290610daf565b90565b90602082820312611ae657600082015167ffffffffffffffff8111611ae157611ade92016119cd565b90565b6101df565b61011e565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015611b21575b6020831014611b1c57565b611aeb565b91607f1691611b11565b905090565b600052602060002090565b9060009291805490611b56611b4f83611b01565b8094611b2b565b91600181169081600014611baa5750600114611b72575b505050565b611b7f9192939450611b30565b6000905b838210611b965750500190388080611b6d565b600181602092548486015201910190611b83565b92949550505060ff19168252801515020190388080611b6d565b611bcd91611b3b565b90565b60200190565b611be09051611970565b90565b1b90565b611c01611bfc611bf683610986565b92611bd0565b611bd6565b9060208110611c0f575b5090565b611c229060001990602003600802611be3565b1638611c0b565b60601b90565b611c3890611c29565b90565b611c4490611c2f565b90565b611c53611c58916103dd565b611c3b565b9052565b611c6881601493611c47565b0190565b611c758161058c565b03611c7c57565b600080fd5b90505190611c8e82611c6c565b565b90602082820312611caa57611ca791600001611c81565b90565b61011e565b60209181520190565b611cd7611ce0602093611ce593611cce81610986565b93848093611caf565b95869101610505565b61052a565b0190565b611cf290611970565b9052565b600052602060002090565b9060009291805490611d1c611d1583611b01565b8094611caf565b91600181169081600014611d755750600114611d38575b505050565b611d459192939450611cf6565b916000925b818410611d5d5750500190388080611d33565b60018160209295939554848601520191019290611d4a565b92949550505060ff1916825215156020020190388080611d33565b959294611ddf611dfa95611dd5611e089a98611dcb611dc08c611dec999860e08201916000818403910152611cb8565b9660208d0190611ce9565b60408b0190611ce9565b6060890190611ce9565b8682036080880152611cb8565b9084820360a0860152611d01565b9160c0818403910152611d01565b90565b90611e1c60018060a01b0391611021565b9181191691161790565b90565b90611e3e611e39611e4592610fd8565b611e26565b8254611e0b565b9055565b60007f6e6f646500000000000000000000000000000000000000000000000000000000910152565b611e7e6004602092610baa565b611e8781611e49565b0190565b611ea19060208101906000818303910152611e71565b90565b611ead90610d7b565b90565b611eb990611ea4565b90565b611ec590610daf565b90565b90505190611ed582610327565b565b90602082820312611ef157611eee91600001611ec8565b90565b61011e565b90565b60ff1690565b611f13611f0e611f1892611ef6565b610d78565b611ef9565b90565b611f2490611eff565b9052565b916020611f4a929493611f43604082019660008301906104a0565b0190611f1b565b565b611f60611f5b611f6592610f81565b610d78565b61017a565b90565b611f74611f7a9161017a565b9161017a565b0290611f858261017a565b918203611f8e57565b610e90565b90565b611faa611fa5611faf92611f93565b610d78565b6102cc565b90565b611fc1611fc7919392936102cc565b926102cc565b8203918211611fd257565b610e90565b61200d61201494612003606094989795611ff9608086019a60008701906104a0565b6020850190611f1b565b60408301906104a0565b01906102cf565b565b61204b602061203561203061202b6000610c9f565b610da3565b610dbb565b63693ec85e90612043610113565b938492610dcc565b82528160008161205d60048201610e42565b03925af19081156127a0576120886120836120cb93602093600091612773575b50610e78565b610e84565b63d370a37d906120c060006120ab60026120a460038a90610b54565b5001610d6b565b936120b4610113565b96879586948593610dcc565b835260048301610194565b03925af190811561276e57600091612740575b50906121006120fa60006120f460058590611937565b01611963565b1561058c565b6123bb575b61213a602061212461211f61211a6000610c9f565b610da3565b610dbb565b63693ec85e90612132610113565b938492610dcc565b82528160008161214c60048201611e8b565b03925af180156123b65761216891600091612388575b50611eb0565b9161217283611ebc565b6020634339ceca9183906121996003946121a461218d610113565b96879586948594610dcc565b845260048401611f28565b03915afa90811561238357600091612355575b506121dd6121d86121c86001610c51565b6121d2600a611f4c565b90611f68565b610ef2565b6121f460036121ee60058790611937565b01610ee5565b6122076122016000611f96565b916102cc565b11612338575b8161222061221a836102cc565b916102cc565b1060001461230c579061224e61223a612255938390611fb2565b600361224860058890611937565b0161105d565b935b611ebc565b6306f0b4f19190600394612276600461227060058890611937565b01610c9f565b90823b15612307576000946122a9869261229e94612292610113565b9a8b9889978896610dcc565b865260048601611fd7565b03925af1918215612302576122d3926122d5575b5060006122cd6001926005611937565b016110ba565b565b6122f59060003d81116122fb575b6122ed81836106bb565b8101906110da565b386122bd565b503d6122e3565b610e5b565b610dc7565b93612255915061233361231f6000611f96565b600361232d60058890611937565b0161105d565b612250565b50612350600361234a60058690611937565b01610ee5565b61220d565b612376915060203d811161237c575b61236e81836106bb565b810190611ed7565b386121b7565b503d612364565b610e5b565b6123a9915060203d81116123af575b6123a181836106bb565b810190610de1565b38612162565b503d612397565b610e5b565b6123f060206123da6123d56123d06000610c9f565b610da3565b610dbb565b63693ec85e906123e8610113565b938492610dcc565b82528160008161240260048201611150565b03925af190811561273b5761246f916124239160009161270d575b50611175565b600061242e82611181565b636c37609a9061246461244f600161244860038a90610b54565b5001610c78565b92612458610113565b96879485938493610dcc565b835260048301610194565b03915afa8015612708576000809390916126de575b50906124be91929060206124a86124a361249e6000610c9f565b610da3565b610dbb565b63693ec85e906124b6610113565b958692610dcc565b8252816000816124d060048201611a78565b03925af180156126d9576124f36124f89161251f956000916126ab575b50611a9d565b611aa9565b906000612509639354e57d92611181565b63354bb9ba90612517610113565b968792610dcc565b825281838161253060048201610227565b03925af19283156126a657868891602096600096612671575b506000926125fa9492612605926125c86125b56125c36125a061258c61259b8b61257560038a90610b54565b500161257f610113565b9260209184928301611bc4565b602082018103825203826106bb565b611be7565b9d956125aa610113565b9283918f8301611c5c565b8e82018103825203826106bb565b611be7565b60026125e460016125db60058790611937565b01946005611937565b01936125ee610113565b9c8d9b8c9a8b99610dcc565b895260048901611d90565b03925af190811561266c5760009161263e575b5061263a5761263533600461262f60058590611937565b01611e29565b612105565b5050565b61265f915060203d8111612665575b61265781836106bb565b810190611c90565b38612618565b503d61264d565b610e5b565b612605919650926125fa949261269a6000953d8088833e61269281836106bb565b810190611ab5565b97925092945092612549565b610e5b565b6126cc915060203d81116126d2575b6126c481836106bb565b810190610de1565b386124ed565b503d6126ba565b610e5b565b6124be92935061270191503d806000833e6126f981836106bb565b8101906119f0565b9291612484565b610e5b565b61272e915060203d8111612734575b61272681836106bb565b810190610de1565b3861241d565b503d61271c565b610e5b565b612761915060203d8111612767575b61275981836106bb565b810190610de1565b386120de565b503d61274f565b610e5b565b6127939150843d8111612799575b61278b81836106bb565b810190610de1565b3861207d565b503d612781565b610e5b565b6127b96127b46007339061107d565b611963565b6128c4575b6127e6816127e06127d160063390610fe4565b916127db83610ee5565b611fb2565b9061105d565b6128006127fb6127f66000610c9f565b610da3565b610dbb565b6376890c58338392803b156128bf5761282d60008094612838612821610113565b97889687958694610dcc565b84526004840161118d565b03925af180156128ba5761288d575b50336128886128767f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436492610fd8565b9261287f610113565b918291826102dc565b0390a2565b6128ad9060003d81116128b3575b6128a581836106bb565b8101906110da565b38612847565b503d61289b565b610e5b565b610dc7565b6128f960206128e36128de6128d96000610c9f565b610da3565b610dbb565b63693ec85e906128f1610113565b938492610dcc565b82528160008161290b60048201611e8b565b03925af19081156129e3576129319161292c916000916129b5575b50611eb0565b611ebc565b6361e728b133600392803b156129b05761295e600093612969612952610113565b96879586948594610dcc565b845260048401611f28565b03915afa80156129ab5761297e575b506127be565b61299e9060003d81116129a4575b61299681836106bb565b8101906110da565b38612978565b503d61298c565b610e5b565b610dc7565b6129d6915060203d81116129dc575b6129ce81836106bb565b810190610de1565b38612926565b503d6129c4565b610e5b565b600090565b6129f56129e8565b50612a0a612a0560063390610fe4565b610ee5565b90565b612a24612a2991612a1c6129e8565b506006610fe4565b610ee5565b90565b612a376101206106e4565b90565b606090565b600090565b600090565b600090565b600090565b612a5b612a2c565b90602080808080808080808a612a6f612a3a565b815201612a7a612a3f565b815201612a85612a44565b815201612a90612a44565b815201612a9b612a49565b815201612aa6612a44565b815201612ab1612a44565b815201612abc612a4e565b815201612ac7612a4e565b81525050565b612ad5612a53565b90565b9060009291805490612af3612aec83611b01565b80946104fc565b91600181169081600014612b4c5750600114612b0f575b505050565b612b1c9192939450611b30565b916000925b818410612b345750500190388080612b0a565b60018160209295939554848601520191019290612b21565b92949550505060ff1916825215156020020190388080612b0a565b90612b7191612ad8565b90565b90612b94612b8d92612b84610113565b93848092612b67565b03836106bb565b565b612b9f90612b74565b90565b90612bac906103dd565b9052565b90612bba9061017a565b9052565b90612bc8906102cc565b9052565b90612bd69061058c565b9052565b612d26612d1c6004612d15612bed612acd565b946000612bfc60038390610b54565b5001612c0b6000880191612b96565b9052612c31612c286001612c2160038590610b54565b5001610c9f565b60208801612ba2565b612c55612c4c6001612c4560038590610b54565b5001610c78565b60408801612bb0565b612c79612c706002612c6960038590610b54565b5001610d6b565b60608801612bb0565b612ca5612c9c612c976001612c9060038690610b54565b5001610c78565b610ef2565b60808801612bbe565b612cc8612cbf84612cb860038590610b54565b5001610d6b565b60a08801612bb0565b612ceb612ce284612cdb60038590610b54565b5001610c51565b60c08801612bb0565b612d0e612d0584612cfe60038590610b54565b5001610d4a565b60e08801612bcc565b6003610b54565b5001610b9d565b6101008301612bcc565b90565b612d4e612d4592602092612d3c816104f8565b94858093611b2b565b93849101610505565b0190565b90565b612d61612d66916102cc565b612d52565b9052565b612d7a612d819160209493612d29565b8092612d55565b0190565b612d99612d90610113565b92839283612d6a565b03902090565b612da891612d85565b90565b612dbf612dba612dc492611f93565b610d78565b61017a565b90565b60007f6578697374000000000000000000000000000000000000000000000000000000910152565b612dfc6005602092610baa565b612e0581612dc7565b0190565b612e1f9060208101906000818303910152612def565b90565b15612e2957565b612e31610113565b62461bcd60e51b815280612e4760048201612e09565b0390fd5b612e57612e5d9161017a565b9161017a565b019067ffffffffffffffff8211612e7057565b610e90565b60007f73686f72742072656e74696f6e00000000000000000000000000000000000000910152565b612eaa600d602092610baa565b612eb381612e75565b0190565b612ecd9060208101906000818303910152612e9d565b90565b15612ed757565b612edf610113565b62461bcd60e51b815280612ef560048201612eb7565b0390fd5b90565b600052602060002090565b5490565b612f1481612f07565b821015612f2f57612f26600591612efc565b91020190600090565b610b2f565b634e487b7160e01b600052600060045260246000fd5b5190565b601f602091010490565b91906008612f74910291612f6e60001984611be3565b92611be3565b9181191691161790565b9190612f94612f8f612f9c9361103e565b61105a565b908354612f58565b9055565b612fb291612fac6129e8565b91612f7e565b565b5b818110612fc0575050565b80612fce6000600193612fa0565b01612fb5565b9190601f8111612fe4575b505050565b612ff061301593611b30565b906020612ffc84612f4e565b8301931061301d575b61300e90612f4e565b0190612fb4565b388080612fdf565b915061300e81929050613005565b9061303c9060001990600802610133565b191690565b8161304b9161302b565b906002021790565b9061305d816104f8565b9067ffffffffffffffff821161311f576130818261307b8554611b01565b85612fd4565b602090601f83116001146130b6579180916130a5936000926130aa575b5050613041565b90555b565b9091500151388061309e565b601f198316916130c585611b30565b9260005b818110613107575091600293918560019694106130ed575b505050020190556130a8565b6130fd910151601f84169061302b565b90553880806130e1565b919360206001819287870151815501950192016130c9565b6106a5565b9061312e91613053565b565b61313a90516103dd565b90565b613147905161017a565b90565b60a01b90565b9061316667ffffffffffffffff60a01b9161314a565b9181191691161790565b90565b9061318861318361318f9261191b565b613170565b8254613150565b9055565b906131a667ffffffffffffffff91611021565b9181191691161790565b906131c56131c06131cc9261191b565b613170565b8254613193565b9055565b6131da90516102cc565b90565b60401b90565b906131fe6fffffffffffffffff0000000000000000916131dd565b9181191691161790565b9061321d6132186132249261191b565b613170565b82546131e3565b9055565b613232905161058c565b90565b60801b90565b9061324a60ff60801b91613235565b9181191691161790565b90613269613264613270926110ab565b6110b7565b825461323b565b9055565b9061334e61010060046133549461329a6000820161329460008801612f4a565b90613124565b6132b3600182016132ad60208801613130565b90611e29565b6132cc600182016132c66040880161313d565b90613173565b6132e5600282016132df6060880161313d565b906131b0565b6132fe600382016132f8608088016131d0565b9061105d565b61331682820161331060a0880161313d565b906131b0565b61332e82820161332860c0880161313d565b90613208565b61334682820161334060e08801613228565b90613254565b019201613228565b9061122b565b565b91906133675761336591613274565b565b612f34565b908154916801000000000000000083101561339c578261339491600161339a95018155612f0b565b90613356565b565b6106a5565b6133b56133b06133ba926102cc565b610d78565b61017a565b90565b90565b6133d46133cf6133d9926133bd565b610d78565b61017a565b90565b6133fb613404602093613409936133f2816104f8565b93848093610baa565b95869101610505565b61052a565b0190565b916134319261342460408201936000830190610187565b60208184039101526133dc565b90565b939161343e614251565b61346e61345561345060048890612d9f565b610d6b565b6134686134626000612dab565b9161017a565b14612e22565b6134a6836134a061349a6134956134856000610c78565b61348f6001610d6b565b90612e4b565b61017a565b9161017a565b11612ed0565b6134db60206134c56134c06134bb6000610c9f565b610da3565b610dbb565b63693ec85e906134d3610113565b938492610dcc565b8252816000816134ed60048201611150565b03925af1908115613a65576135139161350e91600091613a37575b50611175565b611181565b63f804843d83823b15613a325761354a9261353f60008094613533610113565b96879586948593610dcc565b835260048301610194565b03925af18015613a2d57613a00575b5061358f602061357961357461356f6000610c9f565b610da3565b610dbb565b63693ec85e90613587610113565b938492610dcc565b8252816000816135a160048201610e42565b03925af180156139fb576135bd916000916139cd575b50610e78565b6135c681610e84565b6371d49a6383823b156139c8576135fd926135f2600080946135e6610113565b96879586948593610dcc565b835260048301610194565b03925af180156139c3576136499260209261361d92613996575b50610e84565b63d370a37d9061363e60008693613632610113565b96879586948593610dcc565b835260048301610194565b03925af190811561399157600091613963575b50613692602061367c6136776136726000610c9f565b610da3565b610dbb565b63693ec85e9061368a610113565b938492610dcc565b8252816000816136a460048201611e8b565b03925af190811561395e576136ca916136c591600091613930575b50611eb0565b611ebc565b906361e728b190600392803b1561392b576136f86000936137036136ec610113565b96879586948594610dcc565b845260048401611f28565b03915afa8015613926576138f9575b506137398461373361372e866137286000610c78565b90610ea6565b610ef2565b90610f0e565b61375361374e6137496000610c9f565b610da3565b610dbb565b9263e8888915338395803b156138f4576137816000809461378c613775610113565b9a8b9687958694610dcc565b84526004840161118d565b03925af19182156138ef57613831966137c96137c26138109361382298613819976138c2575b506137bd6002610ee5565b610ffc565b600261105d565b6138076137d4612acd565b978a60008a01526137e83360208b01612ba2565b6137fe6137f56000610c78565b60a08b01612bb0565b60c08901612bb0565b60808701612bbe565b60408501612bb0565b60608301612bb0565b61382c6003612ef9565b61336c565b6138576138466138416003610b45565b6133a1565b61385260048490612d9f565b6131b0565b3361387d61386d6138686003610b45565b6133a1565b61387760016133c0565b90610ea6565b916138a87ffea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f7092610fd8565b926138bd6138b4610113565b9283928361340d565b0390a2565b6138e29060003d81116138e8575b6138da81836106bb565b8101906110da565b386137b2565b503d6138d0565b610e5b565b610dc7565b6139199060003d811161391f575b61391181836106bb565b8101906110da565b38613712565b503d613907565b610e5b565b610dc7565b613951915060203d8111613957575b61394981836106bb565b810190610de1565b386136bf565b503d61393f565b610e5b565b613984915060203d811161398a575b61397c81836106bb565b810190610de1565b3861365c565b503d613972565b610e5b565b6139b69060003d81116139bc575b6139ae81836106bb565b8101906110da565b38613617565b503d6139a4565b610e5b565b610dc7565b6139ee915060203d81116139f4575b6139e681836106bb565b810190610de1565b386135b7565b503d6139dc565b610e5b565b613a209060003d8111613a26575b613a1881836106bb565b8101906110da565b38613559565b503d613a0e565b610e5b565b610dc7565b613a58915060203d8111613a5e575b613a5081836106bb565b810190610de1565b38613508565b503d613a46565b610e5b565b60007f6163746976650000000000000000000000000000000000000000000000000000910152565b613a9f6006602092610baa565b613aa881613a6a565b0190565b613ac29060208101906000818303910152613a92565b90565b15613acc57565b613ad4610113565b62461bcd60e51b815280613aea60048201613aac565b0390fd5b613b02613afd613b0792611ef6565b610d78565b61017a565b90565b60007f746f6f206c617465000000000000000000000000000000000000000000000000910152565b613b3f6008602092610baa565b613b4881613b0a565b0190565b613b629060208101906000818303910152613b32565b90565b15613b6c57565b613b74610113565b62461bcd60e51b815280613b8a60048201613b4c565b0390fd5b9190601f8111613b9e575b505050565b613baa613bcf93611cf6565b906020613bb684612f4e565b83019310613bd7575b613bc890612f4e565b0190612fb4565b388080613b99565b9150613bc881929050613bbf565b90613bef81610986565b9067ffffffffffffffff8211613cb157613c1382613c0d8554611b01565b85613b8e565b602090601f8311600114613c4857918091613c3793600092613c3c575b5050613041565b90555b565b90915001513880613c30565b601f19831691613c5785611cf6565b9260005b818110613c9957509160029391856001969410613c7f575b50505002019055613c3a565b613c8f910151601f84169061302b565b9055388080613c73565b91936020600181928787015181550195019201613c5b565b6106a5565b90613cc091613be5565b565b9091613da390613cd0614251565b613cf9613cf4613cee6004613ce760038890610b54565b5001610b9d565b1561058c565b610c0e565b613d22613d1d613d176004613d1060038890610b54565b5001610d4a565b1561058c565b613ac5565b613d71613d50613d406004613d3960038890610b54565b5001610d6b565b613d4a6003613aee565b90612e4b565b613d6b613d65613d606000610c78565b61017a565b9161017a565b11613b65565b6020613d8d613d88613d836000610c9f565b610da3565b610dbb565b63693ec85e90613d9b610113565b948592610dcc565b825281600081613db560048201610e42565b03925af1918215613efd57613de0613ddb613e2394602093600091613ed0575b50610e78565b610e84565b63d370a37d90613e186000613e036002613dfc60038b90610b54565b5001610d6b565b93613e0c610113565b97889586948593610dcc565b835260048301610194565b03925af18015613ecb57613e9b94613e5d613e7192613e8595600091613e9d575b50613e57613e51336103dd565b916103dd565b14610d07565b6001613e6b60058790611937565b01613cb6565b6002613e7f60058590611937565b01613cb6565b6004613e946001926003610b54565b5001613254565b565b613ebe915060203d8111613ec4575b613eb681836106bb565b810190610de1565b38613e44565b503d613eac565b610e5b565b613ef09150843d8111613ef6575b613ee881836106bb565b810190610de1565b38613dd5565b503d613ede565b610e5b565b613f0c60a06106e4565b90565b606090565b613f1c613f02565b9060208080808086613f2c612a4e565b815201613f37613f0f565b815201613f42613f0f565b815201613f4d612a49565b815201613f58612a3f565b81525050565b613f66613f14565b90565b9060009291805490613f84613f7d83611b01565b809461098a565b91600181169081600014613fdd5750600114613fa0575b505050565b613fad9192939450611cf6565b916000925b818410613fc55750500190388080613f9b565b60018160209295939554848601520191019290613fb2565b92949550505060ff1916825215156020020190388080613f9b565b9061400291613f69565b90565b9061402561401e92614015610113565b93848092613ff8565b03836106bb565b565b61403090614005565b90565b6140df6140d660046140d0614046613f5e565b94600161405560058390611937565b016140636020880191614027565b9052600261407360058390611937565b016140816040880191614027565b90526140a661409d600061409760058590611937565b01611963565b60008801612bcc565b6140c96140c060036140ba60058590611937565b01610ee5565b60608801612bbe565b6005611937565b01610c9f565b60808301612ba2565b90565b600090565b614106614101614116926140f96140e2565b506004612d9f565b610d6b565b61411060016133c0565b90610ea6565b90565b60007f65706f6368000000000000000000000000000000000000000000000000000000910152565b61414e6005602092610baa565b61415781614119565b0190565b6141719060208101906000818303910152614141565b90565b61417d90610d7b565b90565b61418990614174565b90565b61419590610daf565b90565b905051906141a5826101e4565b565b906020828203126141c1576141be91600001614198565b90565b61011e565b60007f636f6e74726f6c00000000000000000000000000000000000000000000000000910152565b6141fb6007602092610baa565b614204816141c6565b0190565b61421e90602081019060008183039101526141ee565b90565b61422a90610d7b565b90565b61423690614221565b90565b61424290610daf565b90565b61424e90610daf565b90565b614286602061427061426b6142666000610c9f565b610da3565b610dbb565b63693ec85e9061427e610113565b938492610dcc565b8252816000816142986004820161415b565b03925af18015614562576142b491600091614534575b50614180565b6142bd8161418c565b63919840ad90803b1561452f576142e1916000916142d9610113565b938492610dcc565b82528183816142f260048201610227565b03925af1801561452a5761432892602092614312926144fd575b5061418c565b639fa6a6e390614320610113565b938492610dcc565b82528160008161433a60048201610227565b03925af19081156144f8576000916144ca575b508061436a61436461435f6000610c78565b61017a565b9161017a565b11614373575b50565b6143a8602061439261438d6143886000610c9f565b610da3565b610dbb565b63693ec85e906143a0610113565b938492610dcc565b8252816000816143ba60048201614208565b03925af19081156144c5576143e0916143db91600091614497575b5061422d565b614239565b906340c10f196143ef30614245565b6143f96002610ee5565b93803b156144925761441f6000809461442a614413610113565b98899687958694610dcc565b84526004840161118d565b03925af191821561448d5761445a92614460575b5061445361444c6000611f96565b600261105d565b6000613173565b38614370565b6144809060003d8111614486575b61447881836106bb565b8101906110da565b3861443e565b503d61446e565b610e5b565b610dc7565b6144b8915060203d81116144be575b6144b081836106bb565b810190610de1565b386143d5565b503d6144a6565b610e5b565b6144eb915060203d81116144f1575b6144e381836106bb565b8101906141a7565b3861434d565b503d6144d9565b610e5b565b61451d9060003d8111614523575b61451581836106bb565b8101906110da565b3861430c565b503d61450b565b610e5b565b610dc7565b614555915060203d811161455b575b61454d81836106bb565b810190610de1565b386142ae565b503d614543565b610e5b56fea2646970667358221220d3752bc53cb69ca89a05d44fafd6b558faa9d9e4fdfb4db62a55dde314c5b64b64736f6c63430008180033",
}

// SpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use SpaceMetaData.ABI instead.
var SpaceABI = SpaceMetaData.ABI

// SpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SpaceMetaData.Bin instead.
var SpaceBin = SpaceMetaData.Bin

// DeploySpace deploys a new Ethereum contract, binding an instance of Space to it.
func DeploySpace(auth *bind.TransactOpts, backend bind.ContractBackend, _b common.Address) (common.Address, *types.Transaction, *Space, error) {
	parsed, err := SpaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SpaceBin), backend, _b)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Space{SpaceCaller: SpaceCaller{contract: contract}, SpaceTransactor: SpaceTransactor{contract: contract}, SpaceFilterer: SpaceFilterer{contract: contract}}, nil
}

// Space is an auto generated Go binding around an Ethereum contract.
type Space struct {
	SpaceCaller     // Read-only binding to the contract
	SpaceTransactor // Write-only binding to the contract
	SpaceFilterer   // Log filterer for contract events
}

// SpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type SpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SpaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SpaceSession struct {
	Contract     *Space            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SpaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SpaceCallerSession struct {
	Contract *SpaceCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SpaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SpaceTransactorSession struct {
	Contract     *SpaceTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SpaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type SpaceRaw struct {
	Contract *Space // Generic contract binding to access the raw methods on
}

// SpaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SpaceCallerRaw struct {
	Contract *SpaceCaller // Generic read-only contract binding to access the raw methods on
}

// SpaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SpaceTransactorRaw struct {
	Contract *SpaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSpace creates a new instance of Space, bound to a specific deployed contract.
func NewSpace(address common.Address, backend bind.ContractBackend) (*Space, error) {
	contract, err := bindSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Space{SpaceCaller: SpaceCaller{contract: contract}, SpaceTransactor: SpaceTransactor{contract: contract}, SpaceFilterer: SpaceFilterer{contract: contract}}, nil
}

// NewSpaceCaller creates a new read-only instance of Space, bound to a specific deployed contract.
func NewSpaceCaller(address common.Address, caller bind.ContractCaller) (*SpaceCaller, error) {
	contract, err := bindSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SpaceCaller{contract: contract}, nil
}

// NewSpaceTransactor creates a new write-only instance of Space, bound to a specific deployed contract.
func NewSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*SpaceTransactor, error) {
	contract, err := bindSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SpaceTransactor{contract: contract}, nil
}

// NewSpaceFilterer creates a new log filterer instance of Space, bound to a specific deployed contract.
func NewSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*SpaceFilterer, error) {
	contract, err := bindSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SpaceFilterer{contract: contract}, nil
}

// bindSpace binds a generic wrapper to an already deployed contract.
func bindSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SpaceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Space *SpaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Space.Contract.SpaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Space *SpaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Space.Contract.SpaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Space *SpaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Space.Contract.SpaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Space *SpaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Space.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Space *SpaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Space.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Space *SpaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Space.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _a) view returns(uint256)
func (_Space *SpaceCaller) BalanceOf(opts *bind.CallOpts, _a common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "balanceOf", _a)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _a) view returns(uint256)
func (_Space *SpaceSession) BalanceOf(_a common.Address) (*big.Int, error) {
	return _Space.Contract.BalanceOf(&_Space.CallOpts, _a)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _a) view returns(uint256)
func (_Space *SpaceCallerSession) BalanceOf(_a common.Address) (*big.Int, error) {
	return _Space.Contract.BalanceOf(&_Space.CallOpts, _a)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Space *SpaceCaller) Bank(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "bank")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Space *SpaceSession) Bank() (common.Address, error) {
	return _Space.Contract.Bank(&_Space.CallOpts)
}

// Bank is a free data retrieval call binding the contract method 0x76cdb03b.
//
// Solidity: function bank() view returns(address)
func (_Space *SpaceCallerSession) Bank() (common.Address, error) {
	return _Space.Contract.Bank(&_Space.CallOpts)
}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Space *SpaceCaller) Current(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "current")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Space *SpaceSession) Current() (uint64, error) {
	return _Space.Contract.Current(&_Space.CallOpts)
}

// Current is a free data retrieval call binding the contract method 0x9fa6a6e3.
//
// Solidity: function current() view returns(uint64)
func (_Space *SpaceCallerSession) Current() (uint64, error) {
	return _Space.Contract.Current(&_Space.CallOpts)
}

// GetIndex is a free data retrieval call binding the contract method 0xea1bbe35.
//
// Solidity: function getIndex(string _sn) view returns(uint64)
func (_Space *SpaceCaller) GetIndex(opts *bind.CallOpts, _sn string) (uint64, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "getIndex", _sn)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetIndex is a free data retrieval call binding the contract method 0xea1bbe35.
//
// Solidity: function getIndex(string _sn) view returns(uint64)
func (_Space *SpaceSession) GetIndex(_sn string) (uint64, error) {
	return _Space.Contract.GetIndex(&_Space.CallOpts, _sn)
}

// GetIndex is a free data retrieval call binding the contract method 0xea1bbe35.
//
// Solidity: function getIndex(string _sn) view returns(uint64)
func (_Space *SpaceCallerSession) GetIndex(_sn string) (uint64, error) {
	return _Space.Contract.GetIndex(&_Space.CallOpts, _sn)
}

// GetProfit is a free data retrieval call binding the contract method 0x679dffb4.
//
// Solidity: function getProfit() view returns(uint256)
func (_Space *SpaceCaller) GetProfit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "getProfit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProfit is a free data retrieval call binding the contract method 0x679dffb4.
//
// Solidity: function getProfit() view returns(uint256)
func (_Space *SpaceSession) GetProfit() (*big.Int, error) {
	return _Space.Contract.GetProfit(&_Space.CallOpts)
}

// GetProfit is a free data retrieval call binding the contract method 0x679dffb4.
//
// Solidity: function getProfit() view returns(uint256)
func (_Space *SpaceCallerSession) GetProfit() (*big.Int, error) {
	return _Space.Contract.GetProfit(&_Space.CallOpts)
}

// GetSpace is a free data retrieval call binding the contract method 0x91fb07c4.
//
// Solidity: function getSpace(uint64 _si) view returns((string,address,uint64,uint64,uint256,uint64,uint64,bool,bool) _info)
func (_Space *SpaceCaller) GetSpace(opts *bind.CallOpts, _si uint64) (ISpaceInfo, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "getSpace", _si)

	if err != nil {
		return *new(ISpaceInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ISpaceInfo)).(*ISpaceInfo)

	return out0, err

}

// GetSpace is a free data retrieval call binding the contract method 0x91fb07c4.
//
// Solidity: function getSpace(uint64 _si) view returns((string,address,uint64,uint64,uint256,uint64,uint64,bool,bool) _info)
func (_Space *SpaceSession) GetSpace(_si uint64) (ISpaceInfo, error) {
	return _Space.Contract.GetSpace(&_Space.CallOpts, _si)
}

// GetSpace is a free data retrieval call binding the contract method 0x91fb07c4.
//
// Solidity: function getSpace(uint64 _si) view returns((string,address,uint64,uint64,uint256,uint64,uint64,bool,bool) _info)
func (_Space *SpaceCallerSession) GetSpace(_si uint64) (ISpaceInfo, error) {
	return _Space.Contract.GetSpace(&_Space.CallOpts, _si)
}

// GetZKP is a free data retrieval call binding the contract method 0xcf936449.
//
// Solidity: function getZKP(uint64 _si) view returns((bool,bytes,bytes,uint256,address) _info)
func (_Space *SpaceCaller) GetZKP(opts *bind.CallOpts, _si uint64) (ISpaceZKP, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "getZKP", _si)

	if err != nil {
		return *new(ISpaceZKP), err
	}

	out0 := *abi.ConvertType(out[0], new(ISpaceZKP)).(*ISpaceZKP)

	return out0, err

}

// GetZKP is a free data retrieval call binding the contract method 0xcf936449.
//
// Solidity: function getZKP(uint64 _si) view returns((bool,bytes,bytes,uint256,address) _info)
func (_Space *SpaceSession) GetZKP(_si uint64) (ISpaceZKP, error) {
	return _Space.Contract.GetZKP(&_Space.CallOpts, _si)
}

// GetZKP is a free data retrieval call binding the contract method 0xcf936449.
//
// Solidity: function getZKP(uint64 _si) view returns((bool,bytes,bytes,uint256,address) _info)
func (_Space *SpaceCallerSession) GetZKP(_si uint64) (ISpaceZKP, error) {
	return _Space.Contract.GetZKP(&_Space.CallOpts, _si)
}

// MinPenalty is a free data retrieval call binding the contract method 0x0eba9849.
//
// Solidity: function minPenalty() view returns(uint64)
func (_Space *SpaceCaller) MinPenalty(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "minPenalty")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// MinPenalty is a free data retrieval call binding the contract method 0x0eba9849.
//
// Solidity: function minPenalty() view returns(uint64)
func (_Space *SpaceSession) MinPenalty() (uint64, error) {
	return _Space.Contract.MinPenalty(&_Space.CallOpts)
}

// MinPenalty is a free data retrieval call binding the contract method 0x0eba9849.
//
// Solidity: function minPenalty() view returns(uint64)
func (_Space *SpaceCallerSession) MinPenalty() (uint64, error) {
	return _Space.Contract.MinPenalty(&_Space.CallOpts)
}

// MinRent is a free data retrieval call binding the contract method 0xe38c6116.
//
// Solidity: function minRent() view returns(uint64)
func (_Space *SpaceCaller) MinRent(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "minRent")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// MinRent is a free data retrieval call binding the contract method 0xe38c6116.
//
// Solidity: function minRent() view returns(uint64)
func (_Space *SpaceSession) MinRent() (uint64, error) {
	return _Space.Contract.MinRent(&_Space.CallOpts)
}

// MinRent is a free data retrieval call binding the contract method 0xe38c6116.
//
// Solidity: function minRent() view returns(uint64)
func (_Space *SpaceCallerSession) MinRent() (uint64, error) {
	return _Space.Contract.MinRent(&_Space.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_Space *SpaceCaller) Reward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Space.contract.Call(opts, &out, "reward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_Space *SpaceSession) Reward() (*big.Int, error) {
	return _Space.Contract.Reward(&_Space.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_Space *SpaceCallerSession) Reward() (*big.Int, error) {
	return _Space.Contract.Reward(&_Space.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0xb8c4dfec.
//
// Solidity: function activate(uint64 _si, bytes _rt, bytes _prf) returns()
func (_Space *SpaceTransactor) Activate(opts *bind.TransactOpts, _si uint64, _rt []byte, _prf []byte) (*types.Transaction, error) {
	return _Space.contract.Transact(opts, "activate", _si, _rt, _prf)
}

// Activate is a paid mutator transaction binding the contract method 0xb8c4dfec.
//
// Solidity: function activate(uint64 _si, bytes _rt, bytes _prf) returns()
func (_Space *SpaceSession) Activate(_si uint64, _rt []byte, _prf []byte) (*types.Transaction, error) {
	return _Space.Contract.Activate(&_Space.TransactOpts, _si, _rt, _prf)
}

// Activate is a paid mutator transaction binding the contract method 0xb8c4dfec.
//
// Solidity: function activate(uint64 _si, bytes _rt, bytes _prf) returns()
func (_Space *SpaceTransactorSession) Activate(_si uint64, _rt []byte, _prf []byte) (*types.Transaction, error) {
	return _Space.Contract.Activate(&_Space.TransactOpts, _si, _rt, _prf)
}

// Add is a paid mutator transaction binding the contract method 0x99760d12.
//
// Solidity: function add(string _sn, uint64 _mi, uint64 _gi, uint256 _p, uint64 _e) returns()
func (_Space *SpaceTransactor) Add(opts *bind.TransactOpts, _sn string, _mi uint64, _gi uint64, _p *big.Int, _e uint64) (*types.Transaction, error) {
	return _Space.contract.Transact(opts, "add", _sn, _mi, _gi, _p, _e)
}

// Add is a paid mutator transaction binding the contract method 0x99760d12.
//
// Solidity: function add(string _sn, uint64 _mi, uint64 _gi, uint256 _p, uint64 _e) returns()
func (_Space *SpaceSession) Add(_sn string, _mi uint64, _gi uint64, _p *big.Int, _e uint64) (*types.Transaction, error) {
	return _Space.Contract.Add(&_Space.TransactOpts, _sn, _mi, _gi, _p, _e)
}

// Add is a paid mutator transaction binding the contract method 0x99760d12.
//
// Solidity: function add(string _sn, uint64 _mi, uint64 _gi, uint256 _p, uint64 _e) returns()
func (_Space *SpaceTransactorSession) Add(_sn string, _mi uint64, _gi uint64, _p *big.Int, _e uint64) (*types.Transaction, error) {
	return _Space.Contract.Add(&_Space.TransactOpts, _sn, _mi, _gi, _p, _e)
}

// CheckC4 is a paid mutator transaction binding the contract method 0x1bd98c77.
//
// Solidity: function checkC4(uint64 _si) returns()
func (_Space *SpaceTransactor) CheckC4(opts *bind.TransactOpts, _si uint64) (*types.Transaction, error) {
	return _Space.contract.Transact(opts, "checkC4", _si)
}

// CheckC4 is a paid mutator transaction binding the contract method 0x1bd98c77.
//
// Solidity: function checkC4(uint64 _si) returns()
func (_Space *SpaceSession) CheckC4(_si uint64) (*types.Transaction, error) {
	return _Space.Contract.CheckC4(&_Space.TransactOpts, _si)
}

// CheckC4 is a paid mutator transaction binding the contract method 0x1bd98c77.
//
// Solidity: function checkC4(uint64 _si) returns()
func (_Space *SpaceTransactorSession) CheckC4(_si uint64) (*types.Transaction, error) {
	return _Space.Contract.CheckC4(&_Space.TransactOpts, _si)
}

// Shutdown is a paid mutator transaction binding the contract method 0x1b1683f7.
//
// Solidity: function shutdown(uint64 _si) returns()
func (_Space *SpaceTransactor) Shutdown(opts *bind.TransactOpts, _si uint64) (*types.Transaction, error) {
	return _Space.contract.Transact(opts, "shutdown", _si)
}

// Shutdown is a paid mutator transaction binding the contract method 0x1b1683f7.
//
// Solidity: function shutdown(uint64 _si) returns()
func (_Space *SpaceSession) Shutdown(_si uint64) (*types.Transaction, error) {
	return _Space.Contract.Shutdown(&_Space.TransactOpts, _si)
}

// Shutdown is a paid mutator transaction binding the contract method 0x1b1683f7.
//
// Solidity: function shutdown(uint64 _si) returns()
func (_Space *SpaceTransactorSession) Shutdown(_si uint64) (*types.Transaction, error) {
	return _Space.Contract.Shutdown(&_Space.TransactOpts, _si)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _m) returns()
func (_Space *SpaceTransactor) Withdraw(opts *bind.TransactOpts, _m *big.Int) (*types.Transaction, error) {
	return _Space.contract.Transact(opts, "withdraw", _m)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _m) returns()
func (_Space *SpaceSession) Withdraw(_m *big.Int) (*types.Transaction, error) {
	return _Space.Contract.Withdraw(&_Space.TransactOpts, _m)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _m) returns()
func (_Space *SpaceTransactorSession) Withdraw(_m *big.Int) (*types.Transaction, error) {
	return _Space.Contract.Withdraw(&_Space.TransactOpts, _m)
}

// SpaceAddGPUIterator is returned from FilterAddGPU and is used to iterate over the raw logs and unpacked data for AddGPU events raised by the Space contract.
type SpaceAddGPUIterator struct {
	Event *SpaceAddGPU // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SpaceAddGPUIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SpaceAddGPU)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SpaceAddGPU)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SpaceAddGPUIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SpaceAddGPUIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SpaceAddGPU represents a AddGPU event raised by the Space contract.
type SpaceAddGPU struct {
	A   common.Address
	Ai  uint64
	An  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddGPU is a free log retrieval operation binding the contract event 0xfea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f70.
//
// Solidity: event AddGPU(address indexed _a, uint64 _ai, string _an)
func (_Space *SpaceFilterer) FilterAddGPU(opts *bind.FilterOpts, _a []common.Address) (*SpaceAddGPUIterator, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Space.contract.FilterLogs(opts, "AddGPU", _aRule)
	if err != nil {
		return nil, err
	}
	return &SpaceAddGPUIterator{contract: _Space.contract, event: "AddGPU", logs: logs, sub: sub}, nil
}

// WatchAddGPU is a free log subscription operation binding the contract event 0xfea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f70.
//
// Solidity: event AddGPU(address indexed _a, uint64 _ai, string _an)
func (_Space *SpaceFilterer) WatchAddGPU(opts *bind.WatchOpts, sink chan<- *SpaceAddGPU, _a []common.Address) (event.Subscription, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Space.contract.WatchLogs(opts, "AddGPU", _aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SpaceAddGPU)
				if err := _Space.contract.UnpackLog(event, "AddGPU", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddGPU is a log parse operation binding the contract event 0xfea931920f2df20d0e447fe0ee025f54206ac7d1266b239bb4a96eb075151f70.
//
// Solidity: event AddGPU(address indexed _a, uint64 _ai, string _an)
func (_Space *SpaceFilterer) ParseAddGPU(log types.Log) (*SpaceAddGPU, error) {
	event := new(SpaceAddGPU)
	if err := _Space.contract.UnpackLog(event, "AddGPU", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SpaceWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Space contract.
type SpaceWithdrawIterator struct {
	Event *SpaceWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SpaceWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SpaceWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SpaceWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SpaceWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SpaceWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SpaceWithdraw represents a Withdraw event raised by the Space contract.
type SpaceWithdraw struct {
	A   common.Address
	M   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed _a, uint256 _m)
func (_Space *SpaceFilterer) FilterWithdraw(opts *bind.FilterOpts, _a []common.Address) (*SpaceWithdrawIterator, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Space.contract.FilterLogs(opts, "Withdraw", _aRule)
	if err != nil {
		return nil, err
	}
	return &SpaceWithdrawIterator{contract: _Space.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed _a, uint256 _m)
func (_Space *SpaceFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *SpaceWithdraw, _a []common.Address) (event.Subscription, error) {

	var _aRule []interface{}
	for _, _aItem := range _a {
		_aRule = append(_aRule, _aItem)
	}

	logs, sub, err := _Space.contract.WatchLogs(opts, "Withdraw", _aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SpaceWithdraw)
				if err := _Space.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed _a, uint256 _m)
func (_Space *SpaceFilterer) ParseWithdraw(log types.Log) (*SpaceWithdraw, error) {
	event := new(SpaceWithdraw)
	if err := _Space.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
